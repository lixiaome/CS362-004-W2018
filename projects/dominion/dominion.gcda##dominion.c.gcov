        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      364:    8:void assert(int check){
      364:    8-block  0
      364:    9:	if(check == 1){
      364:    9-block  0
      298:   10:		return;
      298:   10-block  0
        -:   11:	}
        -:   12:	else{
       66:   13:		printf("--------------Test case failed!\n");
       66:   13-block  0
        -:   14:	}
        -:   15:}
        -:   16:
     6200:   17:int compare(const void* a, const void* b) {
     6200:   17-block  0
     6200:   18:  if (*(int*)a > *(int*)b)
     6200:   18-block  0
    #####:   19:    return 1;
    $$$$$:   19-block  0
     6200:   20:  if (*(int*)a < *(int*)b)
     6200:   20-block  0
     1648:   21:    return -1;
     1648:   21-block  0
     4552:   22:  return 0;
     4552:   22-block  0
        -:   23:}
        -:   24:
    #####:   25:struct gameState* newGame() {
    $$$$$:   25-block  0
    #####:   26:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   27:  return g;
    $$$$$:   27-block  0
        -:   28:}
        -:   29:
    #####:   30:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   30-block  0
        -:   31:		  int k8, int k9, int k10) {
    #####:   32:  int* k = malloc(10 * sizeof(int));
    #####:   33:  k[0] = k1;
    #####:   34:  k[1] = k2;
    #####:   35:  k[2] = k3;
    #####:   36:  k[3] = k4;
    #####:   37:  k[4] = k5;
    #####:   38:  k[5] = k6;
    #####:   39:  k[6] = k7;
    #####:   40:  k[7] = k8;
    #####:   41:  k[8] = k9;
    #####:   42:  k[9] = k10;
    #####:   43:  return k;
    $$$$$:   43-block  0
        -:   44:}
        -:   45:
      206:   46:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
      206:   46-block  0
        -:   47:		   struct gameState *state) {
        -:   48:
        -:   49:  int i;
        -:   50:  int j;
        -:   51:  int it;			
        -:   52:  //set up random number generator
      206:   53:  SelectStream(1);
      206:   53-block  0
      206:   54:  PutSeed((long)randomSeed);
        -:   55:  
        -:   56:  //check number of players
      206:   57:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
      206:   57-block  0
        -:   58:    {
    #####:   59:      return -1;
    $$$$$:   59-block  0
        -:   60:    }
        -:   61:
        -:   62:  //set number of players
      206:   63:  state->numPlayers = numPlayers;
        -:   64:
        -:   65:  //check selected kingdom cards are different
     2266:   66:  for (i = 0; i < 10; i++)
      206:   66-block  0
     2060:   66-block  1
     2266:   66-block  2
        -:   67:    {
    22660:   68:      for (j = 0; j < 10; j++)
     2060:   68-block  0
    20600:   68-block  1
    22660:   68-block  2
        -:   69:        {
    20600:   70:	  if (j != i && kingdomCards[j] == kingdomCards[i])
    20600:   70-block  0
    18540:   70-block  1
        -:   71:	    {
    #####:   72:	      return -1;
    $$$$$:   72-block  0
        -:   73:	    }
        -:   74:        }
        -:   75:    }
        -:   76:
        -:   77:
        -:   78:  //initialize supply
        -:   79:  ///////////////////////////////
        -:   80:
        -:   81:  //set number of Curse cards
      206:   82:  if (numPlayers == 2)
      206:   82-block  0
        -:   83:    {
      206:   84:      state->supplyCount[curse] = 10;
      206:   84-block  0
        -:   85:    }
    #####:   86:  else if (numPlayers == 3)
    $$$$$:   86-block  0
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 20;
    $$$$$:   88-block  0
        -:   89:    }
        -:   90:  else
        -:   91:    {
    #####:   92:      state->supplyCount[curse] = 30;
    $$$$$:   92-block  0
        -:   93:    }
        -:   94:
        -:   95:  //set number of Victory cards
      206:   96:  if (numPlayers == 2)
      206:   96-block  0
        -:   97:    {
      206:   98:      state->supplyCount[estate] = 8;
      206:   99:      state->supplyCount[duchy] = 8;
      206:  100:      state->supplyCount[province] = 8;
      206:  100-block  0
        -:  101:    }
        -:  102:  else
        -:  103:    {
    #####:  104:      state->supplyCount[estate] = 12;
    #####:  105:      state->supplyCount[duchy] = 12;
    #####:  106:      state->supplyCount[province] = 12;
    $$$$$:  106-block  0
        -:  107:    }
        -:  108:
        -:  109:  //set number of Treasure cards
      206:  110:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      206:  111:  state->supplyCount[silver] = 40;
      206:  112:  state->supplyCount[gold] = 30;
        -:  113:
        -:  114:  //set number of Kingdom cards
     4326:  115:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
      206:  115-block  0
     4120:  115-block  1
     4326:  115-block  2
        -:  116:    {
    33990:  117:      for (j = 0; j < 10; j++)           		//loop chosen cards
     4120:  117-block  0
    29870:  117-block  1
    33990:  117-block  2
        -:  118:	{
    31930:  119:	  if (kingdomCards[j] == i)
    31930:  119-block  0
        -:  120:	    {
        -:  121:	      //check if card is a 'Victory' Kingdom card
     2060:  122:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
     2060:  122-block  0
     1854:  122-block  1
        -:  123:		{
      824:  124:		  if (numPlayers == 2){ 
      412:  124-block  0
      412:  124-block  1
      412:  125:		    state->supplyCount[i] = 8; 
      412:  125-block  0
        -:  126:		  }
    #####:  127:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  127-block  0
        -:  128:		}
        -:  129:	      else
        -:  130:		{
     1648:  131:		  state->supplyCount[i] = 10;
     1648:  131-block  0
        -:  132:		}
     2060:  133:	      break;
     2060:  133-block  0
        -:  134:	    }
        -:  135:	  else    //card is not in the set choosen for the game
        -:  136:	    {
    29870:  137:	      state->supplyCount[i] = -1;
        -:  138:	    }
        -:  139:	}
        -:  140:
        -:  141:    }
        -:  142:
        -:  143:  ////////////////////////
        -:  144:  //supply intilization complete
        -:  145:
        -:  146:  //set player decks
      618:  147:  for (i = 0; i < numPlayers; i++)
      206:  147-block  0
      412:  147-block  1
      618:  147-block  2
        -:  148:    {
      412:  149:      state->deckCount[i] = 0;
     1648:  150:      for (j = 0; j < 3; j++)
      412:  150-block  0
     1236:  150-block  1
     1648:  150-block  2
        -:  151:	{
     1236:  152:	  state->deck[i][j] = estate;
     1236:  153:	  state->deckCount[i]++;
        -:  154:	}
     3296:  155:      for (j = 3; j < 10; j++)
      412:  155-block  0
     2884:  155-block  1
     3296:  155-block  2
        -:  156:	{
     2884:  157:	  state->deck[i][j] = copper;
     2884:  158:	  state->deckCount[i]++;		
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //shuffle player decks
      618:  163:  for (i = 0; i < numPlayers; i++)
      206:  163-block  0
      412:  163-block  1
      618:  163-block  2
        -:  164:    {
      412:  165:      if ( shuffle(i, state) < 0 )
      412:  165-block  0
        -:  166:	{
    #####:  167:	  return -1;
    $$$$$:  167-block  0
        -:  168:	}
        -:  169:    }
        -:  170:
        -:  171:  //draw player hands
      618:  172:  for (i = 0; i < numPlayers; i++)
      206:  172-block  0
      412:  172-block  1
      618:  172-block  2
        -:  173:    {  
        -:  174:      //initialize hand size to zero
      412:  175:      state->handCount[i] = 0;
      412:  176:      state->discardCount[i] = 0;
        -:  177:      //draw 5 cards
        -:  178:      // for (j = 0; j < 5; j++)
        -:  179:      //	{
        -:  180:      //	  drawCard(i, state);
        -:  181:      //	}
        -:  182:    }
        -:  183:  
        -:  184:  //set embargo tokens to 0 for all supply piles
     5768:  185:  for (i = 0; i <= treasure_map; i++)
      206:  185-block  0
     5562:  185-block  1
     5768:  185-block  2
        -:  186:    {
     5562:  187:      state->embargoTokens[i] = 0;
        -:  188:    }
        -:  189:
        -:  190:  //initialize first player's turn
      206:  191:  state->outpostPlayed = 0;
      206:  192:  state->phase = 0;
      206:  193:  state->numActions = 1;
      206:  194:  state->numBuys = 1;
      206:  195:  state->playedCardCount = 0;
      206:  196:  state->whoseTurn = 0;
      206:  197:  state->handCount[state->whoseTurn] = 0;
        -:  198:  //int it; move to top
        -:  199:
        -:  200:  //Moved draw cards to here, only drawing at the start of a turn
     1236:  201:  for (it = 0; it < 5; it++){
      206:  201-block  0
     1236:  201-block  1
     1030:  202:    drawCard(state->whoseTurn, state);
     1030:  202-block  0
        -:  203:  }
        -:  204:
      206:  205:  updateCoins(state->whoseTurn, state, 0);
      206:  205-block  0
        -:  206:
      206:  207:  return 0;
        -:  208:}
        -:  209:
     1444:  210:int shuffle(int player, struct gameState *state) {
     1444:  210-block  0
        -:  211: 
        -:  212:
        -:  213:  int newDeck[MAX_DECK];
     1444:  214:  int newDeckPos = 0;
        -:  215:  int card;
        -:  216:  int i;
        -:  217:
     1444:  218:  if (state->deckCount[player] < 1)
     1444:  218-block  0
     1028:  219:    return -1;
     1028:  219-block  0
      416:  220:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
      416:  220-block  0
        -:  221:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  222:
     4556:  223:  while (state->deckCount[player] > 0) {
     4556:  223-block  0
     4140:  224:    card = floor(Random() * state->deckCount[player]);
     4140:  224-block  0
     4140:  225:    newDeck[newDeckPos] = state->deck[player][card];
     4140:  226:    newDeckPos++;
    14462:  227:    for (i = card; i < state->deckCount[player]-1; i++) {
    10322:  227-block  0
    14462:  227-block  1
    10322:  228:      state->deck[player][i] = state->deck[player][i+1];
        -:  229:    }
     4140:  230:    state->deckCount[player]--;
     4140:  230-block  0
        -:  231:  }
     4556:  232:  for (i = 0; i < newDeckPos; i++) {
      416:  232-block  0
     4140:  232-block  1
     4556:  232-block  2
     4140:  233:    state->deck[player][i] = newDeck[i];
     4140:  234:    state->deckCount[player]++;
        -:  235:  }
        -:  236:
     1444:  237:  return 0;
      416:  237-block  0
     1444:  237-block  1
        -:  238:}
        -:  239:
    #####:  240:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  240-block  0
        -:  241:{	
        -:  242:  int card;
    #####:  243:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  244:
        -:  245:  //check if it is the right phase
    #####:  246:  if (state->phase != 0)
    $$$$$:  246-block  0
        -:  247:    {
    #####:  248:      return -1;
    $$$$$:  248-block  0
        -:  249:    }
        -:  250:	
        -:  251:  //check if player has enough actions
    #####:  252:  if ( state->numActions < 1 )
    $$$$$:  252-block  0
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
        -:  255:    }
        -:  256:	
        -:  257:  //get card played
    #####:  258:  card = handCard(handPos, state);
    $$$$$:  258-block  0
        -:  259:	
        -:  260:  //check if selected card is an action
    #####:  261:  if ( card < adventurer || card > treasure_map )
    $$$$$:  261-block  0
        -:  262:    {
    #####:  263:      return -1;
    $$$$$:  263-block  0
        -:  264:    }
        -:  265:	
        -:  266:  //play card
    #####:  267:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  267-block  0
        -:  268:    {
    #####:  269:      return -1;
    $$$$$:  269-block  0
        -:  270:    }
        -:  271:	
        -:  272:  //reduce number of actions
    #####:  273:  state->numActions--;
        -:  274:
        -:  275:  //update coins (Treasure cards may be added with card draws)
    #####:  276:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  276-block  0
        -:  277:	
    #####:  278:  return 0;
    $$$$$:  278-block  0
        -:  279:}
        -:  280:
    #####:  281:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  281-block  0
    $$$$$:  281-block  1
        -:  282:  int who;
        -:  283:  if (DEBUG){
        -:  284:    printf("Entering buyCard...\n");
        -:  285:  }
        -:  286:
        -:  287:  // I don't know what to do about the phase thing.
        -:  288:
    #####:  289:  who = state->whoseTurn;
        -:  290:
    #####:  291:  if (state->numBuys < 1){
    $$$$$:  291-block  0
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have any buys left\n");
    #####:  294:    return -1;
    $$$$$:  294-block  0
    #####:  295:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  295-block  0
        -:  296:    if (DEBUG)
        -:  297:      printf("There are not any of that type of card left\n");
    #####:  298:    return -1;
    $$$$$:  298-block  0
    #####:  299:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  299-block  0
        -:  300:    if (DEBUG) 
        -:  301:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  302:    return -1;
    $$$$$:  302-block  0
        -:  303:  } else {
    #####:  304:    state->phase=1;
        -:  305:    //state->supplyCount[supplyPos]--;
    #####:  306:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  306-block  0
        -:  307:  
    #####:  308:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  309:    state->numBuys--;
        -:  310:    if (DEBUG)
        -:  311:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  312:  }
        -:  313:
        -:  314:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  315:  //state->discardCount[who]++;
        -:  316:    
    #####:  317:  return 0;
    $$$$$:  317-block  0
        -:  318:}
        -:  319:
    #####:  320:int numHandCards(struct gameState *state) {
    $$$$$:  320-block  0
    #####:  321:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  321-block  0
        -:  322:}
        -:  323:
    #####:  324:int handCard(int handPos, struct gameState *state) {
    $$$$$:  324-block  0
    #####:  325:  int currentPlayer = whoseTurn(state);
    $$$$$:  325-block  0
    #####:  326:  return state->hand[currentPlayer][handPos];
        -:  327:}
        -:  328:
      248:  329:int supplyCount(int card, struct gameState *state) {
      248:  329-block  0
      248:  330:  return state->supplyCount[card];
      248:  330-block  0
        -:  331:}
        -:  332:
       64:  333:int fullDeckCount(int player, int card, struct gameState *state) {
       64:  333-block  0
        -:  334:  int i;
       64:  335:  int count = 0;
        -:  336:
      684:  337:  for (i = 0; i < state->deckCount[player]; i++)
       64:  337-block  0
      620:  337-block  1
      684:  337-block  2
        -:  338:    {
      620:  339:      if (state->deck[player][i] == card) count++;
      620:  339-block  0
       20:  339-block  1
        -:  340:    }
        -:  341:
      684:  342:  for (i = 0; i < state->handCount[player]; i++)
       64:  342-block  0
      620:  342-block  1
      684:  342-block  2
        -:  343:    {
      620:  344:      if (state->hand[player][i] == card) count++;
      620:  344-block  0
       20:  344-block  1
        -:  345:    }
        -:  346:
      684:  347:  for (i = 0; i < state->discardCount[player]; i++)
       64:  347-block  0
      620:  347-block  1
      684:  347-block  2
        -:  348:    {
      620:  349:      if (state->discard[player][i] == card) count++;
      620:  349-block  0
       20:  349-block  1
        -:  350:    }
        -:  351:
       64:  352:  return count;
       64:  352-block  0
        -:  353:}
        -:  354:
    #####:  355:int whoseTurn(struct gameState *state) {
    $$$$$:  355-block  0
    #####:  356:  return state->whoseTurn;
    $$$$$:  356-block  0
        -:  357:}
        -:  358:
    #####:  359:int endTurn(struct gameState *state) {
    $$$$$:  359-block  0
        -:  360:  int k;
        -:  361:  int i;
    #####:  362:  int currentPlayer = whoseTurn(state);
    $$$$$:  362-block  0
        -:  363:  
        -:  364:  //Discard hand
    #####:  365:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  365-block  0
    $$$$$:  365-block  1
    #####:  366:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  367:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  368:  }
    #####:  369:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  370:    
        -:  371:  //Code for determining the player
    #####:  372:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  372-block  0
    #####:  373:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  373-block  0
        -:  374:  }
        -:  375:  else{
    #####:  376:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  376-block  0
        -:  377:  }
        -:  378:
    #####:  379:  state->outpostPlayed = 0;
    #####:  380:  state->phase = 0;
    #####:  381:  state->numActions = 1;
    #####:  382:  state->coins = 0;
    #####:  383:  state->numBuys = 1;
    #####:  384:  state->playedCardCount = 0;
    #####:  385:  state->handCount[state->whoseTurn] = 0;
        -:  386:
        -:  387:  //int k; move to top
        -:  388:  //Next player draws hand
    #####:  389:  for (k = 0; k < 5; k++){
    $$$$$:  389-block  0
    $$$$$:  389-block  1
    #####:  390:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  390-block  0
        -:  391:  }
        -:  392:
        -:  393:  //Update money
    #####:  394:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  394-block  0
        -:  395:
    #####:  396:  return 0;
        -:  397:}
        -:  398:
    #####:  399:int isGameOver(struct gameState *state) {
    $$$$$:  399-block  0
        -:  400:  int i;
        -:  401:  int j;
        -:  402:	
        -:  403:  //if stack of Province cards is empty, the game ends
    #####:  404:  if (state->supplyCount[province] == 0)
    $$$$$:  404-block  0
        -:  405:    {
    #####:  406:      return 1;
    $$$$$:  406-block  0
        -:  407:    }
        -:  408:
        -:  409:  //if three supply pile are at 0, the game ends
    #####:  410:  j = 0;
    #####:  411:  for (i = 0; i < 25; i++)
    $$$$$:  411-block  0
    $$$$$:  411-block  1
    $$$$$:  411-block  2
        -:  412:    {
    #####:  413:      if (state->supplyCount[i] == 0)
    $$$$$:  413-block  0
        -:  414:	{
    #####:  415:	  j++;
    $$$$$:  415-block  0
        -:  416:	}
        -:  417:    }
    #####:  418:  if ( j >= 3)
    $$$$$:  418-block  0
        -:  419:    {
    #####:  420:      return 1;
    $$$$$:  420-block  0
        -:  421:    }
        -:  422:
    #####:  423:  return 0;
    $$$$$:  423-block  0
        -:  424:}
        -:  425:
       12:  426:int scoreFor (int player, struct gameState *state) {
       12:  426-block  0
        -:  427:
        -:  428:  int i;
       12:  429:  int score = 0;
        -:  430:  //score from hand
      132:  431:  for (i = 0; i < state->handCount[player]; i++)
       12:  431-block  0
      120:  431-block  1
      132:  431-block  2
        -:  432:    {
      120:  433:      if (state->hand[player][i] == curse) { score = score - 1; };
      120:  433-block  0
       20:  433-block  1
      120:  434:      if (state->hand[player][i] == estate) { score = score + 1; };
      120:  434-block  0
       20:  434-block  1
      120:  435:      if (state->hand[player][i] == duchy) { score = score + 3; };
      120:  435-block  0
       20:  435-block  1
      120:  436:      if (state->hand[player][i] == province) { score = score + 6; };
      120:  436-block  0
       20:  436-block  1
      120:  437:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      120:  437-block  0
       20:  437-block  1
      120:  438:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      120:  438-block  0
       20:  438-block  1
        -:  439:    }
        -:  440:
        -:  441:  //score from discard
      132:  442:  for (i = 0; i < state->discardCount[player]; i++)
       12:  442-block  0
      120:  442-block  1
      132:  442-block  2
        -:  443:    {
      120:  444:      if (state->discard[player][i] == curse) { score = score - 1; };
      120:  444-block  0
       20:  444-block  1
      120:  445:      if (state->discard[player][i] == estate) { score = score + 1; };
      120:  445-block  0
       20:  445-block  1
      120:  446:      if (state->discard[player][i] == duchy) { score = score + 3; };
      120:  446-block  0
       20:  446-block  1
      120:  447:      if (state->discard[player][i] == province) { score = score + 6; };
      120:  447-block  0
       20:  447-block  1
      120:  448:      if (state->discard[player][i] == great_hall) { score = score + 1; };
      120:  448-block  0
       20:  448-block  1
      120:  449:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      120:  449-block  0
       20:  449-block  1
        -:  450:    }
        -:  451:
        -:  452:  //score from deck
      132:  453:  for (i = 0; i < state->discardCount[player]; i++)
       12:  453-block  0
      120:  453-block  1
      132:  453-block  2
        -:  454:    {
      120:  455:      if (state->deck[player][i] == curse) { score = score - 1; };
      120:  455-block  0
       20:  455-block  1
      120:  456:      if (state->deck[player][i] == estate) { score = score + 1; };
      120:  456-block  0
       20:  456-block  1
      120:  457:      if (state->deck[player][i] == duchy) { score = score + 3; };
      120:  457-block  0
       20:  457-block  1
      120:  458:      if (state->deck[player][i] == province) { score = score + 6; };
      120:  458-block  0
       20:  458-block  1
      120:  459:      if (state->deck[player][i] == great_hall) { score = score + 1; };
      120:  459-block  0
       20:  459-block  1
      120:  460:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      120:  460-block  0
       20:  460-block  1
        -:  461:    }
        -:  462:
       12:  463:  return score;
       12:  463-block  0
        -:  464:}
        -:  465:
    #####:  466:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  466-block  0
        -:  467:  int i;	
        -:  468:  int j;
        -:  469:  int highScore;
        -:  470:  int currentPlayer;
        -:  471:
        -:  472:  //get score for each player
    #####:  473:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  473-block  0
    $$$$$:  473-block  1
    $$$$$:  473-block  2
        -:  474:    {
        -:  475:      //set unused player scores to -9999
    #####:  476:      if (i >= state->numPlayers)
    $$$$$:  476-block  0
        -:  477:	{
    #####:  478:	  players[i] = -9999;
    $$$$$:  478-block  0
        -:  479:	}
        -:  480:      else
        -:  481:	{
    #####:  482:	  players[i] = scoreFor (i, state);
    $$$$$:  482-block  0
        -:  483:	}
        -:  484:    }
        -:  485:
        -:  486:  //find highest score
    #####:  487:  j = 0;
    #####:  488:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  488-block  0
    $$$$$:  488-block  1
    $$$$$:  488-block  2
        -:  489:    {
    #####:  490:      if (players[i] > players[j])
    $$$$$:  490-block  0
        -:  491:	{
    #####:  492:	  j = i;
    $$$$$:  492-block  0
        -:  493:	}
        -:  494:    }
    #####:  495:  highScore = players[j];
        -:  496:
        -:  497:  //add 1 to players who had less turns
    #####:  498:  currentPlayer = whoseTurn(state);
    $$$$$:  498-block  0
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  499-block  0
    $$$$$:  499-block  1
        -:  500:    {
    #####:  501:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  501-block  0
    $$$$$:  501-block  1
        -:  502:	{
    #####:  503:	  players[i]++;
    $$$$$:  503-block  0
        -:  504:	}
        -:  505:    }
        -:  506:
        -:  507:  //find new highest score
    #####:  508:  j = 0;
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  509-block  0
    $$$$$:  509-block  1
    $$$$$:  509-block  2
        -:  510:    {
    #####:  511:      if ( players[i] > players[j] )
    $$$$$:  511-block  0
        -:  512:	{
    #####:  513:	  j = i;
    $$$$$:  513-block  0
        -:  514:	}
        -:  515:    }
    #####:  516:  highScore = players[j];
        -:  517:
        -:  518:  //set winners in array to 1 and rest to 0
    #####:  519:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  519-block  0
    $$$$$:  519-block  1
    $$$$$:  519-block  2
        -:  520:    {
    #####:  521:      if ( players[i] == highScore )
    $$$$$:  521-block  0
        -:  522:	{
    #####:  523:	  players[i] = 1;
    $$$$$:  523-block  0
        -:  524:	}
        -:  525:      else
        -:  526:	{
    #####:  527:	  players[i] = 0;
    $$$$$:  527-block  0
        -:  528:	}
        -:  529:    }
        -:  530:
    #####:  531:  return 0;
    $$$$$:  531-block  0
        -:  532:}
        -:  533:
     1676:  534:int drawCard(int player, struct gameState *state)
     1676:  534-block  0
        -:  535:{	int count;
        -:  536:  int deckCounter;
     1676:  537:  if (state->deckCount[player] <= 0){//Deck is empty
     1676:  537-block  0
        -:  538:    
        -:  539:    //Step 1 Shuffle the discard pile back into a deck
        -:  540:    int i;
        -:  541:    //Move discard to deck
      536:  542:    for (i = 0; i < state->discardCount[player];i++){
      516:  542-block  0
       20:  542-block  1
      536:  542-block  2
       20:  543:      state->deck[player][i] = state->discard[player][i];
       20:  544:      state->discard[player][i] = -1;
        -:  545:    }
        -:  546:
      516:  547:    state->deckCount[player] = state->discardCount[player];
      516:  548:    state->discardCount[player] = 0;//Reset discard
        -:  549:
        -:  550:    //Shufffle the deck
      516:  551:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
      516:  551-block  0
        -:  552:   
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  555:    }
        -:  556:    
      516:  557:    state->discardCount[player] = 0;
        -:  558:
        -:  559:    //Step 2 Draw Card
      516:  560:    count = state->handCount[player];//Get current player's hand count
        -:  561:    
        -:  562:    if (DEBUG){//Debug statements
        -:  563:      printf("Current hand count: %d\n", count);
        -:  564:    }
        -:  565:    
      516:  566:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  567:
      516:  568:    if (deckCounter == 0)
      516:  568-block  0
      512:  569:      return -1;
      512:  569-block  0
        -:  570:
        4:  571:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  572:    state->deckCount[player]--;
        4:  573:    state->handCount[player]++;//Increment hand count
        4:  573-block  0
        -:  574:  }
        -:  575:
        -:  576:  else{
     1160:  577:    int count = state->handCount[player];//Get current hand count for player
     1160:  577-block  0
        -:  578:    int deckCounter;
        -:  579:    if (DEBUG){//Debug statements
        -:  580:      printf("Current hand count: %d\n", count);
        -:  581:    }
        -:  582:
     1160:  583:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1160:  584:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1160:  585:    state->deckCount[player]--;
     1160:  586:    state->handCount[player]++;//Increment hand count
     1160:  586-block  0
        -:  587:  }
        -:  588:
     1164:  589:  return 0;
     1164:  589-block  0
        -:  590:}
        -:  591:
       72:  592:int getCost(int cardNumber)
       72:  592-block  0
        -:  593:{
       72:  594:  switch( cardNumber ) 
       72:  594-block  0
        -:  595:    {
        -:  596:    case curse:
       12:  597:      return 0;
       12:  597-block  0
        -:  598:    case estate:
    #####:  599:      return 2;
    $$$$$:  599-block  0
        -:  600:    case duchy:
    #####:  601:      return 5;
    $$$$$:  601-block  0
        -:  602:    case province:
    #####:  603:      return 8;
    $$$$$:  603-block  0
        -:  604:    case copper:
       12:  605:      return 0;
       12:  605-block  0
        -:  606:    case silver:
       12:  607:      return 3;
       12:  607-block  0
        -:  608:    case gold:
       12:  609:      return 6;
       12:  609-block  0
        -:  610:    case adventurer:
    #####:  611:      return 6;
    $$$$$:  611-block  0
        -:  612:    case council_room:
    #####:  613:      return 5;
    $$$$$:  613-block  0
        -:  614:    case feast:
    #####:  615:      return 4;
    $$$$$:  615-block  0
        -:  616:    case gardens:
    #####:  617:      return 4;
    $$$$$:  617-block  0
        -:  618:    case mine:
       12:  619:      return 5;
       12:  619-block  0
        -:  620:    case remodel:
    #####:  621:      return 4;
    $$$$$:  621-block  0
        -:  622:    case smithy:
    #####:  623:      return 4;
    $$$$$:  623-block  0
        -:  624:    case village:
    #####:  625:      return 3;
    $$$$$:  625-block  0
        -:  626:    case baron:
    #####:  627:      return 4;
    $$$$$:  627-block  0
        -:  628:    case great_hall:
    #####:  629:      return 3;
    $$$$$:  629-block  0
        -:  630:    case minion:
    #####:  631:      return 5;
    $$$$$:  631-block  0
        -:  632:    case steward:
    #####:  633:      return 3;
    $$$$$:  633-block  0
        -:  634:    case tribute:
    #####:  635:      return 5;
    $$$$$:  635-block  0
        -:  636:    case ambassador:
    #####:  637:      return 3;
    $$$$$:  637-block  0
        -:  638:    case cutpurse:
    #####:  639:      return 4;
    $$$$$:  639-block  0
        -:  640:    case embargo: 
    #####:  641:      return 2;
    $$$$$:  641-block  0
        -:  642:    case outpost:
    #####:  643:      return 5;
    $$$$$:  643-block  0
        -:  644:    case salvager:
    #####:  645:      return 4;
    $$$$$:  645-block  0
        -:  646:    case sea_hag:
    #####:  647:      return 4;
    $$$$$:  647-block  0
        -:  648:    case treasure_map:
       12:  649:      return 4;
       12:  649-block  0
        -:  650:    }
        -:  651:	
    #####:  652:  return -1;
    $$$$$:  652-block  0
        -:  653:}
        -:  654:
       10:  655:void run_smithy(int currentPlayer, struct gameState *state, int handPos){
       10:  655-block  0
        -:  656:      //+3 Cards
        -:  657:      int i;
       50:  658:      for (i = 0; i <= 3; i++) //bug added
       10:  658-block  0
       50:  658-block  1
        -:  659:	{
       40:  660:	  drawCard(currentPlayer, state);
       40:  660-block  0
        -:  661:	}
        -:  662:			
        -:  663:      //discard card from hand
       10:  664:      discardCard(handPos, currentPlayer, state, 0);
       10:  664-block  0
       10:  665:      return;
        -:  666:}	
        -:  667:
        6:  668:void run_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int *temphand){
        6:  668-block  0
        6:  669:     int z = 0;
      562:  670:     while(drawntreasure<2){
        6:  670-block  0
      562:  670-block  1
      556:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
      556:  671-block  0
      516:  672:	  shuffle(currentPlayer, state);
      516:  672-block  0
        -:  673:	}
      556:  674:	drawCard(currentPlayer, state);
      556:  674-block  0
      556:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      556:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      544:  676-block  0
      544:  676-block  1
       12:  677:	  drawntreasure++;
       12:  677-block  0
        -:  678:	else{
      544:  679:	  temphand[z]=cardDrawn;
      544:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      544:  681:	  z++;
      544:  681-block  0
        -:  682:	}
        -:  683:      }
      546:  684:      while(z-1>0){//bug added
        6:  684-block  0
      546:  684-block  1
      540:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      540:  686:	z=z-1;
      540:  686-block  0
        -:  687:      }
        6:  688:      return;
        6:  688-block  0
        -:  689:}
        -:  690:
       10:  691:void run_council_room(int currentPlayer,struct gameState *state, int handPos){
       10:  691-block  0
        -:  692:	int i;	
        -:  693:      //+4 Cards
       50:  694:      for (i = 0; i < 4; i++)
       10:  694-block  0
       50:  694-block  1
        -:  695:	{
       40:  696:	  drawCard(currentPlayer, state);
       40:  696-block  0
        -:  697:	}
        -:  698:			
        -:  699:      //+1 Buy
       10:  700:      state->numBuys++;
        -:  701:			
        -:  702:      //Each other player draws a card
       30:  703:      for (i = 0; i < state->numPlayers; i++) //bug added
       10:  703-block  0
       20:  703-block  1
       30:  703-block  2
        -:  704:	{
       20:  705:	  if ( i != currentPlayer )
       20:  705-block  0
        -:  706:	    {
       10:  707:	      drawCard(i, state);
       10:  707-block  0
        -:  708:	    }
        -:  709:	}
        -:  710:			
        -:  711:      //put played card in played card pile
       10:  712:      discardCard(handPos, currentPlayer, state, 0);		
       10:  712-block  0
       10:  713:	return;
        -:  714:}
        -:  715:
    #####:  716:void run_feast(struct gameState *state, int currentPlayer, int *temphand, int choice1){
    $$$$$:  716-block  0
        -:  717:	int i;
        -:  718:	int x;
        -:  719:      //gain card with cost up to 5
        -:  720:      //Backup hand
    #####:  721:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  721-block  0
    $$$$$:  721-block  1
    $$$$$:  721-block  2
    #####:  722:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  723:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  724:      }
        -:  725:      //Backup hand
        -:  726:
        -:  727:      //Update Coins for Buy
    #####:  728:      updateCoins(currentPlayer, state, 5);
    $$$$$:  728-block  0
    #####:  729:      x = 1;//Condition to loop on
    #####:  730:      while( x == 1) {//Buy one card
    $$$$$:  730-block  0
    #####:  731:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  731-block  0
        -:  732:	  if (DEBUG)
        -:  733:	    printf("None of that card left, sorry!\n");
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  737:	  }
        -:  738:	}
    #####:  739:	else if (state->coins < getCost(choice1)){
    $$$$$:  739-block  0
    #####:  740:	  printf("That card is too expensive!\n");
    $$$$$:  740-block  0
        -:  741:
        -:  742:	  if (DEBUG){
        -:  743:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  744:	  }
        -:  745:	}
        -:  746:	else{
        -:  747:
        -:  748:	  if (DEBUG){
        -:  749:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  750:	  }
        -:  751:
    #####:  752:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  752-block  0
    #####:  753:	  x = 0;//No more buying cards
        -:  754:
        -:  755:	  if (DEBUG){
        -:  756:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  757:	  }
        -:  758:
        -:  759:	}
        -:  760:      }     
        -:  761:
        -:  762:      //Reset Hand
    #####:  763:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  763-block  0
    $$$$$:  763-block  1
    $$$$$:  763-block  2
    #####:  764:	state->hand[currentPlayer][i] = temphand[i];
    #####:  765:	temphand[i] = -1;
        -:  766:      }
        -:  767:      //Reset Hand
    #####:  768:      return;
    $$$$$:  768-block  0
        -:  769:}
        -:  770:
       48:  771:void run_mine(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos){
       48:  771-block  0
        -:  772:	int j;
        -:  773:	int i;
       48:  774:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  775:
       48:  776:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
       48:  776-block  0
       36:  776-block  1
        -:  777:	{
       12:  778:	  return -1;
       12:  778-block  0
        -:  779:	}
        -:  780:		
       36:  781:      if (choice2 > treasure_map || choice2 < curse)
       36:  781-block  0
       36:  781-block  1
        -:  782:	{
    #####:  783:	  return -1;
    $$$$$:  783-block  0
        -:  784:	}
        -:  785:
       36:  786:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
       36:  786-block  0
        -:  787:	{
       28:  788:	  return -1;
       28:  788-block  0
        -:  789:	}
        -:  790:
        8:  791:      gainCard(choice2, state, 1, currentPlayer);//bug added
        8:  791-block  0
        -:  792:
        -:  793:      //discard card from hand
        8:  794:      discardCard(handPos, currentPlayer, state, 0);
        -:  795:
        -:  796:      //discard trashed card
        8:  797:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  797-block  0
        8:  797-block  1
        -:  798:	{
        8:  799:	  if (state->hand[currentPlayer][i] == j)
        8:  799-block  0
        -:  800:	    {
        8:  801:	      discardCard(i, currentPlayer, state, 0);			
        8:  801-block  0
        8:  802:	      break;
        -:  803:	    }
        -:  804:	}
        -:  805:
        8:  806:	return;
        8:  806-block  0
        -:  807:}
        -:  808:
    #####:  809:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
    $$$$$:  809-block  0
        -:  810:{
        -:  811:  int i;
        -:  812:  int j;
        -:  813:  int k;
        -:  814:  int x;
        -:  815:  int index;
    #####:  816:  int currentPlayer = whoseTurn(state);
    $$$$$:  816-block  0
    #####:  817:  int nextPlayer = currentPlayer + 1;
        -:  818:
    #####:  819:  int tributeRevealedCards[2] = {-1, -1};
        -:  820:  int temphand[MAX_HAND];// moved above the if statement
    #####:  821:  int drawntreasure=0;
        -:  822:  int cardDrawn;
    #####:  823:  int z = 0;// this is the counter for the temp hand
    #####:  824:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  825:    nextPlayer = 0;
    $$$$$:  825-block  0
        -:  826:  }
        -:  827:  
        -:  828:	
        -:  829:  //uses switch to select card and perform actions
    #####:  830:  switch( card ) 
    $$$$$:  830-block  0
        -:  831:    {
        -:  832:    case adventurer:
    #####:  833:    	run_adventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand);
    $$$$$:  833-block  0
    #####:  834:     	return 0;
        -:  835:			
        -:  836:    case council_room:
    #####:  837:      	run_council_room(currentPlayer, state, handPos);
    $$$$$:  837-block  0
    #####:  838:     	return 0;
        -:  839:			
        -:  840:    case feast:
    #####:  841:    	run_feast(state, currentPlayer, temphand, choice1);
    $$$$$:  841-block  0
        -:  842:      			
    #####:  843:      return 0;
        -:  844:			
        -:  845:    case gardens:
    #####:  846:      return -1;
    $$$$$:  846-block  0
        -:  847:			
        -:  848:    case mine:
    #####:  849:	run_mine(state, currentPlayer, choice1, choice2, handPos);		
    $$$$$:  849-block  0
    #####:  850:      return 0;
        -:  851:			
        -:  852:    case remodel:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  855-block  0
        -:  856:	{
    #####:  857:	  return -1;
    $$$$$:  857-block  0
        -:  858:	}
        -:  859:
    #####:  860:      gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  860-block  0
        -:  861:
        -:  862:      //discard card from hand
    #####:  863:      discardCard(handPos, currentPlayer, state, 0);
        -:  864:
        -:  865:      //discard trashed card
    #####:  866:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  866-block  0
    $$$$$:  866-block  1
        -:  867:	{
    #####:  868:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  868-block  0
        -:  869:	    {
    #####:  870:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  870-block  0
    #####:  871:	      break;
        -:  872:	    }
        -:  873:	}
        -:  874:
        -:  875:
    #####:  876:      return 0;
    $$$$$:  876-block  0
        -:  877:		
        -:  878:    case smithy:
    #####:  879:    	run_smithy(currentPlayer, state, handPos);
    $$$$$:  879-block  0
    #####:  880:	return 0;     
        -:  881:      
        -:  882:    case village:
        -:  883:      //+1 Card
    #####:  884:      drawCard(currentPlayer, state);
    $$$$$:  884-block  0
        -:  885:			
        -:  886:      //+2 Actions
    #####:  887:      state->numActions = state->numActions + 2;
        -:  888:			
        -:  889:      //discard played card from hand
    #####:  890:      discardCard(handPos, currentPlayer, state, 0);
    #####:  891:      return 0;
        -:  892:		
        -:  893:    case baron:
    #####:  894:      state->numBuys++;//Increase buys by 1!
    #####:  895:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  895-block  0
    #####:  896:	int p = 0;//Iterator for hand!
    #####:  897:	int card_not_discarded = 1;//Flag for discard set!
    #####:  898:	while(card_not_discarded){
    $$$$$:  898-block  0
    $$$$$:  898-block  1
    $$$$$:  898-block  2
    #####:  899:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  899-block  0
    #####:  900:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  901:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  902:	    state->discardCount[currentPlayer]++;
    #####:  903:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  903-block  0
    $$$$$:  903-block  1
    $$$$$:  903-block  2
    #####:  904:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  905:	    }
    #####:  906:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  907:	    state->handCount[currentPlayer]--;
    #####:  908:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  908-block  0
        -:  909:	  }
    #####:  910:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  910-block  0
        -:  911:	    if(DEBUG) {
        -:  912:	      printf("No estate cards in your hand, invalid choice\n");
        -:  913:	      printf("Must gain an estate if there are any\n");
        -:  914:	    }
    #####:  915:	    if (supplyCount(estate, state) > 0){
    $$$$$:  915-block  0
    #####:  916:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  916-block  0
    #####:  917:	      state->supplyCount[estate]--;//Decrement estates
    #####:  918:	      if (supplyCount(estate, state) == 0){
    #####:  919:		isGameOver(state);
    $$$$$:  919-block  0
        -:  920:	      }
        -:  921:	    }
    #####:  922:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  922-block  0
        -:  923:	  }
        -:  924:			    
        -:  925:	  else{
    #####:  926:	    p++;//Next card
    $$$$$:  926-block  0
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:			    
        -:  931:      else{
    #####:  932:	if (supplyCount(estate, state) > 0){
    $$$$$:  932-block  0
    #####:  933:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  933-block  0
    #####:  934:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  935:	  if (supplyCount(estate, state) == 0){
    #####:  936:	    isGameOver(state);
    $$$$$:  936-block  0
        -:  937:	  }
        -:  938:	}
        -:  939:      }
        -:  940:	    
        -:  941:      
    #####:  942:      return 0;
    $$$$$:  942-block  0
        -:  943:		
        -:  944:    case great_hall:
        -:  945:      //+1 Card
    #####:  946:      drawCard(currentPlayer, state);
    $$$$$:  946-block  0
        -:  947:			
        -:  948:      //+1 Actions
    #####:  949:      state->numActions++;
        -:  950:			
        -:  951:      //discard card from hand
    #####:  952:      discardCard(handPos, currentPlayer, state, 0);
    #####:  953:      return 0;
        -:  954:		
        -:  955:    case minion:
        -:  956:      //+1 action
    #####:  957:      state->numActions++;
        -:  958:			
        -:  959:      //discard card from hand
    #####:  960:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  960-block  0
        -:  961:			
    #####:  962:      if (choice1)		//+2 coins
        -:  963:	{
    #####:  964:	  state->coins = state->coins + 2;
    $$$$$:  964-block  0
        -:  965:	}
        -:  966:			
    #####:  967:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  967-block  0
        -:  968:	{
        -:  969:	  //discard hand
    #####:  970:	  while(numHandCards(state) > 0)
    $$$$$:  970-block  0
    $$$$$:  970-block  1
        -:  971:	    {
    #####:  972:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  972-block  0
        -:  973:	    }
        -:  974:				
        -:  975:	  //draw 4
    #####:  976:	  for (i = 0; i < 4; i++)
    $$$$$:  976-block  0
    $$$$$:  976-block  1
        -:  977:	    {
    #####:  978:	      drawCard(currentPlayer, state);
    $$$$$:  978-block  0
        -:  979:	    }
        -:  980:				
        -:  981:	  //other players discard hand and redraw if hand size > 4
    #####:  982:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  982-block  0
    $$$$$:  982-block  1
    $$$$$:  982-block  2
        -:  983:	    {
    #####:  984:	      if (i != currentPlayer)
    $$$$$:  984-block  0
        -:  985:		{
    #####:  986:		  if ( state->handCount[i] > 4 )
    $$$$$:  986-block  0
        -:  987:		    {
        -:  988:		      //discard hand
    #####:  989:		      while( state->handCount[i] > 0 )
    $$$$$:  989-block  0
    $$$$$:  989-block  1
        -:  990:			{
    #####:  991:			  discardCard(handPos, i, state, 0);
    $$$$$:  991-block  0
        -:  992:			}
        -:  993:							
        -:  994:		      //draw 4
    #####:  995:		      for (j = 0; j < 4; j++)
    $$$$$:  995-block  0
    $$$$$:  995-block  1
        -:  996:			{
    #####:  997:			  drawCard(i, state);
    $$$$$:  997-block  0
        -:  998:			}
        -:  999:		    }
        -: 1000:		}
        -: 1001:	    }
        -: 1002:				
        -: 1003:	}
    #####: 1004:      return 0;
    $$$$$: 1004-block  0
        -: 1005:		
        -: 1006:    case steward:
    #####: 1007:      if (choice1 == 1)
    $$$$$: 1007-block  0
        -: 1008:	{
        -: 1009:	  //+2 cards
    #####: 1010:	  drawCard(currentPlayer, state);
    $$$$$: 1010-block  0
    #####: 1011:	  drawCard(currentPlayer, state);
        -: 1012:	}
    #####: 1013:      else if (choice1 == 2)
    $$$$$: 1013-block  0
        -: 1014:	{
        -: 1015:	  //+2 coins
    #####: 1016:	  state->coins = state->coins + 2;
    $$$$$: 1016-block  0
        -: 1017:	}
        -: 1018:      else
        -: 1019:	{
        -: 1020:	  //trash 2 cards in hand
    #####: 1021:	  discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1021-block  0
    #####: 1022:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1023:	}
        -: 1024:			
        -: 1025:      //discard card from hand
    #####: 1026:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1026-block  0
    #####: 1027:      return 0;
        -: 1028:		
        -: 1029:    case tribute:
    #####: 1030:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1030-block  0
    #####: 1031:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1031-block  0
    #####: 1032:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1033:	  state->deckCount[nextPlayer]--;
    $$$$$: 1033-block  0
        -: 1034:	}
    #####: 1035:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1035-block  0
    #####: 1036:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1037:	  state->discardCount[nextPlayer]--;
    $$$$$: 1037-block  0
        -: 1038:	}
        -: 1039:	else{
        -: 1040:	  //No Card to Reveal
        -: 1041:	  if (DEBUG){
        -: 1042:	    printf("No cards to reveal\n");
        -: 1043:	  }
        -: 1044:	}
        -: 1045:      }
        -: 1046:	    
        -: 1047:      else{
    #####: 1048:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1048-block  0
    #####: 1049:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1049-block  0
    $$$$$: 1049-block  1
    $$$$$: 1049-block  2
    #####: 1050:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1051:	    state->deckCount[nextPlayer]++;
    #####: 1052:	    state->discard[nextPlayer][i] = -1;
    #####: 1053:	    state->discardCount[nextPlayer]--;
        -: 1054:	  }
        -: 1055:			    
    #####: 1056:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1056-block  0
        -: 1057:	} 
    #####: 1058:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1060:	state->deckCount[nextPlayer]--;
    #####: 1061:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
    $$$$$: 1063-block  0
        -: 1064:      }    
        -: 1065:		       
    #####: 1066:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1066-block  0
    #####: 1067:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1068:	state->playedCardCount++;
    #####: 1069:	tributeRevealedCards[1] = -1;
    $$$$$: 1069-block  0
        -: 1070:      }
        -: 1071:
    #####: 1072:      for (i = 0; i <= 2; i ++){
    $$$$$: 1072-block  0
    $$$$$: 1072-block  1
    $$$$$: 1072-block  2
    #####: 1073:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1073-block  0
    $$$$$: 1073-block  1
    $$$$$: 1073-block  2
    #####: 1074:	  state->coins += 2;
    $$$$$: 1074-block  0
        -: 1075:	}
        -: 1076:		    
    #####: 1077:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1077-block  0
    $$$$$: 1077-block  1
    $$$$$: 1077-block  2
    $$$$$: 1077-block  3
    $$$$$: 1077-block  4
    #####: 1078:	  drawCard(currentPlayer, state);
    $$$$$: 1078-block  0
    #####: 1079:	  drawCard(currentPlayer, state);
        -: 1080:	}
        -: 1081:	else{//Action Card
    #####: 1082:	  state->numActions = state->numActions + 2;
    $$$$$: 1082-block  0
        -: 1083:	}
        -: 1084:      }
        -: 1085:	    
    #####: 1086:      return 0;
    $$$$$: 1086-block  0
        -: 1087:		
        -: 1088:    case ambassador:
    #####: 1089:      j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1091-block  0
    $$$$$: 1091-block  1
        -: 1092:	{
    #####: 1093:	  return -1;				
    $$$$$: 1093-block  0
        -: 1094:	}
        -: 1095:
    #####: 1096:      if (choice1 == handPos)
    $$$$$: 1096-block  0
        -: 1097:	{
    #####: 1098:	  return -1;
    $$$$$: 1098-block  0
        -: 1099:	}
        -: 1100:
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1101-block  0
    $$$$$: 1101-block  1
    $$$$$: 1101-block  2
        -: 1102:	{
    #####: 1103:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1103-block  0
    $$$$$: 1103-block  1
    $$$$$: 1103-block  2
        -: 1104:	    {
    #####: 1105:	      j++;
    $$$$$: 1105-block  0
        -: 1106:	    }
        -: 1107:	}
    #####: 1108:      if (j < choice2)
    $$$$$: 1108-block  0
        -: 1109:	{
    #####: 1110:	  return -1;				
    $$$$$: 1110-block  0
        -: 1111:	}
        -: 1112:
        -: 1113:      if (DEBUG) 
        -: 1114:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:      //increase supply count for choosen card by amount being discarded
    #####: 1117:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:			
        -: 1119:      //each other player gains a copy of revealed card
    #####: 1120:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1120-block  0
    $$$$$: 1120-block  1
    $$$$$: 1120-block  2
        -: 1121:	{
    #####: 1122:	  if (i != currentPlayer)
    $$$$$: 1122-block  0
        -: 1123:	    {
    #####: 1124:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1124-block  0
        -: 1125:	    }
        -: 1126:	}
        -: 1127:
        -: 1128:      //discard played card from hand
    #####: 1129:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1129-block  0
        -: 1130:
        -: 1131:      //trash copies of cards returned to supply
    #####: 1132:      for (j = 0; j < choice2; j++)
    $$$$$: 1132-block  0
    $$$$$: 1132-block  1
        -: 1133:	{
    #####: 1134:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1134-block  0
    $$$$$: 1134-block  1
    $$$$$: 1134-block  2
        -: 1135:	    {
    #####: 1136:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1136-block  0
        -: 1137:		{
    #####: 1138:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1138-block  0
    #####: 1139:		  break;
        -: 1140:		}
        -: 1141:	    }
        -: 1142:	}			
        -: 1143:
    #####: 1144:      return 0;
    $$$$$: 1144-block  0
        -: 1145:		
        -: 1146:    case cutpurse:
        -: 1147:
    #####: 1148:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1148-block  0
    #####: 1149:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1149-block  0
    $$$$$: 1149-block  1
        -: 1150:	{
    #####: 1151:	  if (i != currentPlayer)
    $$$$$: 1151-block  0
        -: 1152:	    {
    #####: 1153:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1153-block  0
    $$$$$: 1153-block  1
    $$$$$: 1153-block  2
        -: 1154:		{
    #####: 1155:		  if (state->hand[i][j] == copper)
    $$$$$: 1155-block  0
        -: 1156:		    {
    #####: 1157:		      discardCard(j, i, state, 0);
    $$$$$: 1157-block  0
    #####: 1158:		      break;
        -: 1159:		    }
    #####: 1160:		  if (j == state->handCount[i])
    $$$$$: 1160-block  0
        -: 1161:		    {
    #####: 1162:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1162-block  0
    $$$$$: 1162-block  1
    $$$$$: 1162-block  2
        -: 1163:			{
        -: 1164:			  if (DEBUG)
        -: 1165:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:			}	
    #####: 1167:		      break;
    $$$$$: 1167-block  0
        -: 1168:		    }		
        -: 1169:		}
        -: 1170:					
        -: 1171:	    }
        -: 1172:				
        -: 1173:	}				
        -: 1174:
        -: 1175:      //discard played card from hand
    #####: 1176:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1176-block  0
        -: 1177:
    #####: 1178:      return 0;
        -: 1179:
        -: 1180:		
        -: 1181:    case embargo: 
        -: 1182:      //+2 Coins
    #####: 1183:      state->coins = state->coins + 2;
        -: 1184:			
        -: 1185:      //see if selected pile is in play
    #####: 1186:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1186-block  0
        -: 1187:	{
    #####: 1188:	  return -1;
    $$$$$: 1188-block  0
        -: 1189:	}
        -: 1190:			
        -: 1191:      //add embargo token to selected supply pile
    #####: 1192:      state->embargoTokens[choice1]++;
        -: 1193:			
        -: 1194:      //trash card
    #####: 1195:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1195-block  0
    #####: 1196:      return 0;
        -: 1197:		
        -: 1198:    case outpost:
        -: 1199:      //set outpost flag
    #####: 1200:      state->outpostPlayed++;
        -: 1201:			
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1203-block  0
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case salvager:
        -: 1207:      //+1 buy
    #####: 1208:      state->numBuys++;
        -: 1209:			
    #####: 1210:      if (choice1)
    $$$$$: 1210-block  0
        -: 1211:	{
        -: 1212:	  //gain coins equal to trashed card
    #####: 1213:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1213-block  0
        -: 1214:	  //trash card
    #####: 1215:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1216:	}
        -: 1217:			
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1219-block  0
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case sea_hag:
    #####: 1223:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1223-block  0
    $$$$$: 1223-block  1
    $$$$$: 1223-block  2
    #####: 1224:	if (i != currentPlayer){
    $$$$$: 1224-block  0
    #####: 1225:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1226:	  state->discardCount[i]++;
    #####: 1227:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1227-block  0
        -: 1228:	}
        -: 1229:      }
    #####: 1230:      return 0;
    $$$$$: 1230-block  0
        -: 1231:		
        -: 1232:    case treasure_map:
        -: 1233:      //search hand for another treasure_map
    #####: 1234:      index = -1;
    #####: 1235:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1235-block  0
    $$$$$: 1235-block  1
    $$$$$: 1235-block  2
        -: 1236:	{
    #####: 1237:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1237-block  0
    $$$$$: 1237-block  1
        -: 1238:	    {
    #####: 1239:	      index = i;
    #####: 1240:	      break;
    $$$$$: 1240-block  0
        -: 1241:	    }
        -: 1242:	}
    #####: 1243:      if (index > -1)
    $$$$$: 1243-block  0
        -: 1244:	{
        -: 1245:	  //trash both treasure cards
    #####: 1246:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1246-block  0
    #####: 1247:	  discardCard(index, currentPlayer, state, 1);
        -: 1248:
        -: 1249:	  //gain 4 Gold cards
    #####: 1250:	  for (i = 0; i < 4; i++)
    $$$$$: 1250-block  0
        -: 1251:	    {
    #####: 1252:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1252-block  0
        -: 1253:	    }
        -: 1254:				
        -: 1255:	  //return success
    #####: 1256:	  return 1;
    $$$$$: 1256-block  0
        -: 1257:	}
        -: 1258:			
        -: 1259:      //no second treasure_map found in hand
    #####: 1260:      return -1;
    $$$$$: 1260-block  0
        -: 1261:    }
        -: 1262:	
    #####: 1263:  return -1;
    $$$$$: 1263-block  0
    $$$$$: 1263-block  1
        -: 1264:}
        -: 1265:
       60: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
       60: 1266-block  0
        -: 1267:{
        -: 1268:	
        -: 1269:  //if card is not trashed, added to Played pile 
       60: 1270:  if (trashFlag < 1)
       60: 1270-block  0
        -: 1271:    {
        -: 1272:      //add card to played pile
       48: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       48: 1274:      state->playedCardCount++;
       48: 1274-block  0
        -: 1275:    }
        -: 1276:	
        -: 1277:  //set played card to -1
       60: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:	
        -: 1280:  //remove card from player's hand
       60: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
       60: 1281-block  0
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
       16: 1284:      state->handCount[currentPlayer]--;
       16: 1284-block  0
        -: 1285:    }
       44: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
       44: 1286-block  0
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
    $$$$$: 1289-block  0
        -: 1290:    }
        -: 1291:  else 	
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
       44: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
       44: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
       44: 1298:      state->handCount[currentPlayer]--;
       44: 1298-block  0
        -: 1299:    }
        -: 1300:	
       60: 1301:  return 0;
       60: 1301-block  0
        -: 1302:}
        -: 1303:
      248: 1304:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
      248: 1304-block  0
        -: 1305:{
        -: 1306:  //Note: supplyPos is enum of choosen card
        -: 1307:	
        -: 1308:  //check if supply pile is empty (0) or card is not used in game (-1)
      248: 1309:  if ( supplyCount(supplyPos, state) < 1 )
      248: 1309-block  0
        -: 1310:    {
      124: 1311:      return -1;
      124: 1311-block  0
        -: 1312:    }
        -: 1313:	
        -: 1314:  //added card for [whoseTurn] current player:
        -: 1315:  // toFlag = 0 : add to discard
        -: 1316:  // toFlag = 1 : add to deck
        -: 1317:  // toFlag = 2 : add to hand
        -: 1318:
      124: 1319:  if (toFlag == 1)
      124: 1319-block  0
        -: 1320:    {
       44: 1321:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       44: 1322:      state->deckCount[player]++;
       44: 1322-block  0
        -: 1323:    }
       80: 1324:  else if (toFlag == 2)
       80: 1324-block  0
        -: 1325:    {
       40: 1326:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       40: 1327:      state->handCount[player]++;
       40: 1327-block  0
        -: 1328:    }
        -: 1329:  else
        -: 1330:    {
       40: 1331:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       40: 1332:      state->discardCount[player]++;
       40: 1332-block  0
        -: 1333:    }
        -: 1334:	
        -: 1335:  //decrease number in supply pile
      124: 1336:  state->supplyCount[supplyPos]--;
        -: 1337:	 
      124: 1338:  return 0;
      124: 1338-block  0
        -: 1339:}
        -: 1340:
      206: 1341:int updateCoins(int player, struct gameState *state, int bonus)
      206: 1341-block  0
        -: 1342:{
        -: 1343:  int i;
        -: 1344:	
        -: 1345:  //reset coin count
      206: 1346:  state->coins = 0;
        -: 1347:
        -: 1348:  //add coins for each Treasure card in player's hand
     1236: 1349:  for (i = 0; i < state->handCount[player]; i++)
      206: 1349-block  0
     1030: 1349-block  1
     1236: 1349-block  2
        -: 1350:    {
     1030: 1351:      if (state->hand[player][i] == copper)
     1030: 1351-block  0
        -: 1352:	{
      824: 1353:	  state->coins += 1;
      824: 1353-block  0
        -: 1354:	}
      206: 1355:      else if (state->hand[player][i] == silver)
      206: 1355-block  0
        -: 1356:	{
    #####: 1357:	  state->coins += 2;
    $$$$$: 1357-block  0
        -: 1358:	}
      206: 1359:      else if (state->hand[player][i] == gold)
      206: 1359-block  0
        -: 1360:	{
    #####: 1361:	  state->coins += 3;
    $$$$$: 1361-block  0
        -: 1362:	}	
        -: 1363:    }	
        -: 1364:
        -: 1365:  //add bonus
      206: 1366:  state->coins += bonus;
        -: 1367:
      206: 1368:  return 0;
      206: 1368-block  0
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372://end of dominion.c
        -: 1373:
