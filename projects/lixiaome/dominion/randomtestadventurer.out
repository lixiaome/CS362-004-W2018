Testing run_adventurer.
RANDOM TESTS.
ALL TESTS OK.
File 'randomtestadventurer.c'
Lines executed:100.00% of 44
Creating 'randomtestadventurer.c.gcov'

        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include"dominion.h"
        -:    2:#include"dominion_helpers.h"
        -:    3:#include"rngs.h"
        -:    4:#include<string.h>
        -:    5:#include<stdio.h>
        -:    6:#include<math.h>
        -:    7:
    40000:    8:int checkAdventurer(int drawntreasure,struct gameState *post,int p,int cardDrawn,int *temphand){
    40000:    9:	int check = 0;
        -:   10:	int i, n;
    40000:   11:	int num_trea = 0;
    40000:   12:	int pre_trea_hand = 0;
    40000:   13:	int post_trea_hand = 0;
        -:   14:	struct gameState pre;
    40000:   15:	memcpy (&pre, post, sizeof(struct gameState));
        -:   16:
        -:   17:
 10025692:   18:	for(i = 0;i < pre.deckCount[p];i++) {
  9985692:   19:		if(pre.deck[p][i] == copper||pre.deck[p][i] == silver||pre.deck[p][i] == gold) num_trea++;
        -:   20:	}
  9991896:   21:	for(i = 0;i < pre.discardCount[p];i++) {
  9951896:   22:		if(pre.discard[p][i] == copper||pre.discard[p][i] == silver||pre.discard[p][i] == gold) num_trea++;
        -:   23:	}
 10048288:   24:	for(i = 0;i < pre.handCount[p];i++) {
 10008288:   25:		if(pre.hand[p][i] == copper||pre.hand[p][i] == silver||pre.hand[p][i] == gold) pre_trea_hand++;
        -:   26:	}
    40000:   27:	run_adventurer(drawntreasure,post,p,cardDrawn,temphand);
        -:   28:
 10128278:   29:	for(i = 0;i < post->handCount[p];i++) {
 10088278:   30:		if(post->hand[p][i] == copper||post->hand[p][i] == silver||post->hand[p][i] == gold) post_trea_hand++;
        -:   31:	}
        -:   32:
    40000:   33:	if(num_trea >= 2){
    39991:   34:		if(!assert (post_trea_hand == pre_trea_hand + 2)){
        -:   35://			check = 1;
        -:   36://			printf("post_trea_hand = %d, pre_trea_hand = %d\n", post_trea_hand,pre_trea_hand);
        -:   37:		}
    39991:   38:		if(!assert (post->handCount[p] == pre.handCount[p] + 2)){
        -:   39://			check = 1;
        -:   40://			printf("post handcount = %d, pre handcount = %d\n", post->handCount[p], pre.handCount[p]);
        -:   41:		}
        -:   42:	}
        9:   43:	else if(num_trea == 1){
        8:   44:		if(!assert (post_trea_hand == pre_trea_hand + 1)){
        -:   45://			check = 1;
        -:   46://			printf("post_trea_hand = %d, pre_trea_hand = %d\n", post_trea_hand,pre_trea_hand);
        -:   47:		}
        8:   48:		if(!assert (post->handCount[p] == pre.handCount[p] + 1)){
        -:   49://			check = 1;
        -:   50://			printf("post handcount = %d, pre handcount = %d\n", post->handCount[p], pre.handCount[p]);
        -:   51:		}
        -:   52:	}
        -:   53://	if(check == 1){
        -:   54://		printf("Testing adventurer with %d treasure cards in hand, %d treasure cards in the discard&deck\n",pre_trea_hand,num_trea);
        -:   55://		printf("Handcount = %d, deckCount = %d, discardCount = %d\n",pre.handCount[p],pre.deckCount[p],pre.discardCount[p]);
        -:   56://	}
    40000:   57:}
        -:   58:
        1:   59:int main(){
        1:   60:	int num_test = 40000;
        1:   61:	int drawntreasure = 0;
        1:   62:	int cardDrawn = 0;
        -:   63:	int temphand[MAX_HAND];
        -:   64:	int i,n,j,r,p, deckCount, discardCount, handCOunt;
        -:   65:
        1:   66:	int k[13] = {copper,silver,gold,adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   67:
        -:   68:	struct gameState G;
        -:   69:
        1:   70:	printf("Testing run_adventurer.\n");
        -:   71:
        1:   72:	printf ("RANDOM TESTS.\n");
        -:   73:
        1:   74:	SelectStream(2);
        1:   75:	PutSeed(3);
        -:   76:
    40001:   77:	for(i = 0; i < num_test;i++){
1052040000:   78:		for(j = 0; j < sizeof(struct gameState); j++){
1052000000:   79:			((char*)&G)[j] = floor(Random() * 256);
        -:   80:		}
    40000:   81:		p = floor(Random() * 2);
    40000:   82:		G.deckCount[p] = floor(Random() * MAX_DECK);
    40000:   83:		G.discardCount[p] = floor(Random() * MAX_DECK);
    40000:   84:		G.handCount[p] = floor(Random() * MAX_HAND);
        -:   85:
    40000:   86:		for(n = 0; n < G.deckCount[p];n++) G.deck[p][n] = k[(int)floor(Random() * 13)];
    40000:   87:		for(n = 0; n < G.discardCount[p];n++) G.discard[p][n] = k[(int)floor(Random() * 13)];
    40000:   88:		for(n = 0; n < G.handCount[p];n++) G.hand[p][n] = k[(int)floor(Random() * 13)];
        -:   89:
    40000:   90:		checkAdventurer(drawntreasure,&G,p,cardDrawn,temphand);
        -:   91:	}
        -:   92:
        1:   93:	printf("ALL TESTS OK.\n");
        -:   94:
        1:   95:	return 0;
        -:   96:}
File 'dominion.c'
Lines executed:21.44% of 569
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   184996:    8:int assert(int check){
   184996:    9:	if(check == 1){
   184995:   10:		return 1;
        -:   11:	}
        -:   12:	else{
        1:   13:		printf("--------------Test case failed!\n");
        1:   14:		return 0;
        -:   15:	}
        -:   16:}
        -:   17:
  2335462:   18:int compare(const void* a, const void* b) {
  2335462:   19:  if (*(int*)a > *(int*)b)
  1143712:   20:    return 1;
  1191750:   21:  if (*(int*)a < *(int*)b)
   376562:   22:    return -1;
   815188:   23:  return 0;
        -:   24:}
        -:   25:
    #####:   26:struct gameState* newGame() {
    #####:   27:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   28:  return g;
        -:   29:}
        -:   30:
    #####:   31:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   32:		  int k8, int k9, int k10) {
    #####:   33:  int* k = malloc(10 * sizeof(int));
    #####:   34:  k[0] = k1;
    #####:   35:  k[1] = k2;
    #####:   36:  k[2] = k3;
    #####:   37:  k[3] = k4;
    #####:   38:  k[4] = k5;
    #####:   39:  k[5] = k6;
    #####:   40:  k[6] = k7;
    #####:   41:  k[7] = k8;
    #####:   42:  k[8] = k9;
    #####:   43:  k[9] = k10;
    #####:   44:  return k;
        -:   45:}
        -:   46:
    #####:   47:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   48:		   struct gameState *state) {
        -:   49:
        -:   50:  int i;
        -:   51:  int j;
        -:   52:  int it;			
        -:   53:  //set up random number generator
    #####:   54:  SelectStream(1);
    #####:   55:  PutSeed((long)randomSeed);
        -:   56:  
        -:   57:  //check number of players
    #####:   58:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   59:    {
    #####:   60:      return -1;
        -:   61:    }
        -:   62:
        -:   63:  //set number of players
    #####:   64:  state->numPlayers = numPlayers;
        -:   65:
        -:   66:  //check selected kingdom cards are different
    #####:   67:  for (i = 0; i < 10; i++)
        -:   68:    {
    #####:   69:      for (j = 0; j < 10; j++)
        -:   70:        {
    #####:   71:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   72:	    {
    #####:   73:	      return -1;
        -:   74:	    }
        -:   75:        }
        -:   76:    }
        -:   77:
        -:   78:
        -:   79:  //initialize supply
        -:   80:  ///////////////////////////////
        -:   81:
        -:   82:  //set number of Curse cards
    #####:   83:  if (numPlayers == 2)
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 10;
        -:   86:    }
    #####:   87:  else if (numPlayers == 3)
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 20;
        -:   90:    }
        -:   91:  else
        -:   92:    {
    #####:   93:      state->supplyCount[curse] = 30;
        -:   94:    }
        -:   95:
        -:   96:  //set number of Victory cards
    #####:   97:  if (numPlayers == 2)
        -:   98:    {
    #####:   99:      state->supplyCount[estate] = 8;
    #####:  100:      state->supplyCount[duchy] = 8;
    #####:  101:      state->supplyCount[province] = 8;
        -:  102:    }
        -:  103:  else
        -:  104:    {
    #####:  105:      state->supplyCount[estate] = 12;
    #####:  106:      state->supplyCount[duchy] = 12;
    #####:  107:      state->supplyCount[province] = 12;
        -:  108:    }
        -:  109:
        -:  110:  //set number of Treasure cards
    #####:  111:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  112:  state->supplyCount[silver] = 40;
    #####:  113:  state->supplyCount[gold] = 30;
        -:  114:
        -:  115:  //set number of Kingdom cards
    #####:  116:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  117:    {
    #####:  118:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  119:	{
    #####:  120:	  if (kingdomCards[j] == i)
        -:  121:	    {
        -:  122:	      //check if card is a 'Victory' Kingdom card
    #####:  123:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  124:		{
    #####:  125:		  if (numPlayers == 2){ 
    #####:  126:		    state->supplyCount[i] = 8; 
        -:  127:		  }
    #####:  128:		  else{ state->supplyCount[i] = 12; }
        -:  129:		}
        -:  130:	      else
        -:  131:		{
    #####:  132:		  state->supplyCount[i] = 10;
        -:  133:		}
    #####:  134:	      break;
        -:  135:	    }
        -:  136:	  else    //card is not in the set choosen for the game
        -:  137:	    {
    #####:  138:	      state->supplyCount[i] = -1;
        -:  139:	    }
        -:  140:	}
        -:  141:
        -:  142:    }
        -:  143:
        -:  144:  ////////////////////////
        -:  145:  //supply intilization complete
        -:  146:
        -:  147:  //set player decks
    #####:  148:  for (i = 0; i < numPlayers; i++)
        -:  149:    {
    #####:  150:      state->deckCount[i] = 0;
    #####:  151:      for (j = 0; j < 3; j++)
        -:  152:	{
    #####:  153:	  state->deck[i][j] = estate;
    #####:  154:	  state->deckCount[i]++;
        -:  155:	}
    #####:  156:      for (j = 3; j < 10; j++)
        -:  157:	{
    #####:  158:	  state->deck[i][j] = copper;
    #####:  159:	  state->deckCount[i]++;		
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //shuffle player decks
    #####:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {
    #####:  166:      if ( shuffle(i, state) < 0 )
        -:  167:	{
    #####:  168:	  return -1;
        -:  169:	}
        -:  170:    }
        -:  171:
        -:  172:  //draw player hands
    #####:  173:  for (i = 0; i < numPlayers; i++)
        -:  174:    {  
        -:  175:      //initialize hand size to zero
    #####:  176:      state->handCount[i] = 0;
    #####:  177:      state->discardCount[i] = 0;
        -:  178:      //draw 5 cards
        -:  179:      // for (j = 0; j < 5; j++)
        -:  180:      //	{
        -:  181:      //	  drawCard(i, state);
        -:  182:      //	}
        -:  183:    }
        -:  184:  
        -:  185:  //set embargo tokens to 0 for all supply piles
    #####:  186:  for (i = 0; i <= treasure_map; i++)
        -:  187:    {
    #####:  188:      state->embargoTokens[i] = 0;
        -:  189:    }
        -:  190:
        -:  191:  //initialize first player's turn
    #####:  192:  state->outpostPlayed = 0;
    #####:  193:  state->phase = 0;
    #####:  194:  state->numActions = 1;
    #####:  195:  state->numBuys = 1;
    #####:  196:  state->playedCardCount = 0;
    #####:  197:  state->whoseTurn = 0;
    #####:  198:  state->handCount[state->whoseTurn] = 0;
        -:  199:  //int it; move to top
        -:  200:
        -:  201:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  202:  for (it = 0; it < 5; it++){
    #####:  203:    drawCard(state->whoseTurn, state);
        -:  204:  }
        -:  205:
    #####:  206:  updateCoins(state->whoseTurn, state, 0);
        -:  207:
    #####:  208:  return 0;
        -:  209:}
        -:  210:
     2766:  211:int shuffle(int player, struct gameState *state) {
        -:  212: 
        -:  213:
        -:  214:  int newDeck[MAX_DECK];
     2766:  215:  int newDeckPos = 0;
        -:  216:  int card;
        -:  217:  int i;
        -:  218:
     2766:  219:  if (state->deckCount[player] < 1)
     1370:  220:    return -1;
     1396:  221:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  222:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  223:
   342772:  224:  while (state->deckCount[player] > 0) {
   339980:  225:    card = floor(Random() * state->deckCount[player]);
   339980:  226:    newDeck[newDeckPos] = state->deck[player][card];
   339980:  227:    newDeckPos++;
 28193454:  228:    for (i = card; i < state->deckCount[player]-1; i++) {
 27853474:  229:      state->deck[player][i] = state->deck[player][i+1];
        -:  230:    }
   339980:  231:    state->deckCount[player]--;
        -:  232:  }
   341376:  233:  for (i = 0; i < newDeckPos; i++) {
   339980:  234:    state->deck[player][i] = newDeck[i];
   339980:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
     1396:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  242:{	
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:    {
    #####:  249:      return -1;
        -:  250:    }
        -:  251:	
        -:  252:  //check if player has enough actions
    #####:  253:  if ( state->numActions < 1 )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:	
        -:  261:  //check if selected card is an action
    #####:  262:  if ( card < adventurer || card > treasure_map )
        -:  263:    {
    #####:  264:      return -1;
        -:  265:    }
        -:  266:	
        -:  267:  //play card
    #####:  268:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  269:    {
    #####:  270:      return -1;
        -:  271:    }
        -:  272:	
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:	
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state) {
        -:  283:  int who;
        -:  284:  if (DEBUG){
        -:  285:    printf("Entering buyCard...\n");
        -:  286:  }
        -:  287:
        -:  288:  // I don't know what to do about the phase thing.
        -:  289:
    #####:  290:  who = state->whoseTurn;
        -:  291:
    #####:  292:  if (state->numBuys < 1){
        -:  293:    if (DEBUG)
        -:  294:      printf("You do not have any buys left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (supplyCount(supplyPos, state) <1){
        -:  297:    if (DEBUG)
        -:  298:      printf("There are not any of that type of card left\n");
    #####:  299:    return -1;
    #####:  300:  } else if (state->coins < getCost(supplyPos)){
        -:  301:    if (DEBUG) 
        -:  302:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  303:    return -1;
        -:  304:  } else {
    #####:  305:    state->phase=1;
        -:  306:    //state->supplyCount[supplyPos]--;
    #####:  307:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  308:  
    #####:  309:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  310:    state->numBuys--;
        -:  311:    if (DEBUG)
        -:  312:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  313:  }
        -:  314:
        -:  315:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  316:  //state->discardCount[who]++;
        -:  317:    
    #####:  318:  return 0;
        -:  319:}
        -:  320:
    #####:  321:int numHandCards(struct gameState *state) {
    #####:  322:  return state->handCount[ whoseTurn(state) ];
        -:  323:}
        -:  324:
    #####:  325:int handCard(int handPos, struct gameState *state) {
    #####:  326:  int currentPlayer = whoseTurn(state);
    #####:  327:  return state->hand[currentPlayer][handPos];
        -:  328:}
        -:  329:
      806:  330:int supplyCount(int card, struct gameState *state) {
      806:  331:  return state->supplyCount[card];
        -:  332:}
        -:  333:
    #####:  334:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  335:  int i;
    #####:  336:  int count = 0;
        -:  337:
    #####:  338:  for (i = 0; i < state->deckCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->deck[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  for (i = 0; i < state->handCount[player]; i++)
        -:  344:    {
    #####:  345:      if (state->hand[player][i] == card) count++;
        -:  346:    }
        -:  347:
    #####:  348:  for (i = 0; i < state->discardCount[player]; i++)
        -:  349:    {
    #####:  350:      if (state->discard[player][i] == card) count++;
        -:  351:    }
        -:  352:
    #####:  353:  return count;
        -:  354:}
        -:  355:
    #####:  356:int whoseTurn(struct gameState *state) {
    #####:  357:  return state->whoseTurn;
        -:  358:}
        -:  359:
    #####:  360:int endTurn(struct gameState *state) {
        -:  361:  int k;
        -:  362:  int i;
    #####:  363:  int currentPlayer = whoseTurn(state);
        -:  364:  
        -:  365:  //Discard hand
    #####:  366:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  367:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  368:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  369:  }
    #####:  370:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  371:    
        -:  372:  //Code for determining the player
    #####:  373:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  374:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  375:  }
        -:  376:  else{
    #####:  377:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  378:  }
        -:  379:
    #####:  380:  state->outpostPlayed = 0;
    #####:  381:  state->phase = 0;
    #####:  382:  state->numActions = 1;
    #####:  383:  state->coins = 0;
    #####:  384:  state->numBuys = 1;
    #####:  385:  state->playedCardCount = 0;
    #####:  386:  state->handCount[state->whoseTurn] = 0;
        -:  387:
        -:  388:  //int k; move to top
        -:  389:  //Next player draws hand
    #####:  390:  for (k = 0; k < 5; k++){
    #####:  391:    drawCard(state->whoseTurn, state);//Draw a card
        -:  392:  }
        -:  393:
        -:  394:  //Update money
    #####:  395:  updateCoins(state->whoseTurn, state , 0);
        -:  396:
    #####:  397:  return 0;
        -:  398:}
        -:  399:
    #####:  400:int isGameOver(struct gameState *state) {
        -:  401:  int i;
        -:  402:  int j;
        -:  403:	
        -:  404:  //if stack of Province cards is empty, the game ends
    #####:  405:  if (state->supplyCount[province] == 0)
        -:  406:    {
    #####:  407:      return 1;
        -:  408:    }
        -:  409:
        -:  410:  //if three supply pile are at 0, the game ends
    #####:  411:  j = 0;
    #####:  412:  for (i = 0; i < 25; i++)
        -:  413:    {
    #####:  414:      if (state->supplyCount[i] == 0)
        -:  415:	{
    #####:  416:	  j++;
        -:  417:	}
        -:  418:    }
    #####:  419:  if ( j >= 3)
        -:  420:    {
    #####:  421:      return 1;
        -:  422:    }
        -:  423:
    #####:  424:  return 0;
        -:  425:}
        -:  426:
    #####:  427:int scoreFor (int player, struct gameState *state) {
        -:  428:
        -:  429:  int i;
    #####:  430:  int score = 0;
        -:  431:  //score from hand
    #####:  432:  for (i = 0; i < state->handCount[player]; i++)
        -:  433:    {
    #####:  434:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  435:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  436:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  437:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  438:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  439:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  440:    }
        -:  441:
        -:  442:  //score from discard
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
    #####:  445:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  446:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  447:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  448:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  449:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  450:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  451:    }
        -:  452:
        -:  453:  //score from deck
    #####:  454:  for (i = 0; i < state->discardCount[player]; i++)
        -:  455:    {
    #####:  456:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  457:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  458:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  459:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  460:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  461:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  462:    }
        -:  463:
    #####:  464:  return score;
        -:  465:}
        -:  466:
    #####:  467:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  468:  int i;	
        -:  469:  int j;
        -:  470:  int highScore;
        -:  471:  int currentPlayer;
        -:  472:
        -:  473:  //get score for each player
    #####:  474:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  475:    {
        -:  476:      //set unused player scores to -9999
    #####:  477:      if (i >= state->numPlayers)
        -:  478:	{
    #####:  479:	  players[i] = -9999;
        -:  480:	}
        -:  481:      else
        -:  482:	{
    #####:  483:	  players[i] = scoreFor (i, state);
        -:  484:	}
        -:  485:    }
        -:  486:
        -:  487:  //find highest score
    #####:  488:  j = 0;
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:    {
    #####:  491:      if (players[i] > players[j])
        -:  492:	{
    #####:  493:	  j = i;
        -:  494:	}
        -:  495:    }
    #####:  496:  highScore = players[j];
        -:  497:
        -:  498:  //add 1 to players who had less turns
    #####:  499:  currentPlayer = whoseTurn(state);
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] == highScore && i > currentPlayer )
        -:  503:	{
    #####:  504:	  players[i]++;
        -:  505:	}
        -:  506:    }
        -:  507:
        -:  508:  //find new highest score
    #####:  509:  j = 0;
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] > players[j] )
        -:  513:	{
    #####:  514:	  j = i;
        -:  515:	}
        -:  516:    }
    #####:  517:  highScore = players[j];
        -:  518:
        -:  519:  //set winners in array to 1 and rest to 0
    #####:  520:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  521:    {
    #####:  522:      if ( players[i] == highScore )
        -:  523:	{
    #####:  524:	  players[i] = 1;
        -:  525:	}
        -:  526:      else
        -:  527:	{
    #####:  528:	  players[i] = 0;
        -:  529:	}
        -:  530:    }
        -:  531:
    #####:  532:  return 0;
        -:  533:}
        -:  534:
   722284:  535:int drawCard(int player, struct gameState *state)
        -:  536:{	int count;
        -:  537:  int deckCounter;
   722284:  538:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  539:    
        -:  540:    //Step 1 Shuffle the discard pile back into a deck
        -:  541:    int i;
        -:  542:    //Move discard to deck
   341396:  543:    for (i = 0; i < state->discardCount[player];i++){
   339980:  544:      state->deck[player][i] = state->discard[player][i];
   339980:  545:      state->discard[player][i] = -1;
        -:  546:    }
        -:  547:
     1416:  548:    state->deckCount[player] = state->discardCount[player];
     1416:  549:    state->discardCount[player] = 0;//Reset discard
        -:  550:
        -:  551:    //Shufffle the deck
     1416:  552:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  553:   
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  556:    }
        -:  557:    
     1416:  558:    state->discardCount[player] = 0;
        -:  559:
        -:  560:    //Step 2 Draw Card
     1416:  561:    count = state->handCount[player];//Get current player's hand count
        -:  562:    
        -:  563:    if (DEBUG){//Debug statements
        -:  564:      printf("Current hand count: %d\n", count);
        -:  565:    }
        -:  566:    
     1416:  567:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  568:
     1416:  569:    if (deckCounter == 0)
       20:  570:      return -1;
        -:  571:
     1396:  572:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     1396:  573:    state->deckCount[player]--;
     1396:  574:    state->handCount[player]++;//Increment hand count
        -:  575:  }
        -:  576:
        -:  577:  else{
   720868:  578:    int count = state->handCount[player];//Get current hand count for player
        -:  579:    int deckCounter;
        -:  580:    if (DEBUG){//Debug statements
        -:  581:      printf("Current hand count: %d\n", count);
        -:  582:    }
        -:  583:
   720868:  584:    deckCounter = state->deckCount[player];//Create holder for the deck count
   720868:  585:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   720868:  586:    state->deckCount[player]--;
   720868:  587:    state->handCount[player]++;//Increment hand count
        -:  588:  }
        -:  589:
   722264:  590:  return 0;
        -:  591:}
        -:  592:
     4548:  593:int getCost(int cardNumber)
        -:  594:{
     4548:  595:  switch( cardNumber ) 
        -:  596:    {
        -:  597:    case curse:
    #####:  598:      return 0;
        -:  599:    case estate:
    #####:  600:      return 2;
        -:  601:    case duchy:
    #####:  602:      return 5;
        -:  603:    case province:
    #####:  604:      return 8;
        -:  605:    case copper:
      856:  606:      return 0;
        -:  607:    case silver:
      938:  608:      return 3;
        -:  609:    case gold:
      988:  610:      return 6;
        -:  611:    case adventurer:
      182:  612:      return 6;
        -:  613:    case council_room:
      196:  614:      return 5;
        -:  615:    case feast:
      142:  616:      return 4;
        -:  617:    case gardens:
      154:  618:      return 4;
        -:  619:    case mine:
      192:  620:      return 5;
        -:  621:    case remodel:
      210:  622:      return 4;
        -:  623:    case smithy:
      172:  624:      return 4;
        -:  625:    case village:
      156:  626:      return 3;
        -:  627:    case baron:
      176:  628:      return 4;
        -:  629:    case great_hall:
      186:  630:      return 3;
        -:  631:    case minion:
    #####:  632:      return 5;
        -:  633:    case steward:
    #####:  634:      return 3;
        -:  635:    case tribute:
    #####:  636:      return 5;
        -:  637:    case ambassador:
    #####:  638:      return 3;
        -:  639:    case cutpurse:
    #####:  640:      return 4;
        -:  641:    case embargo: 
    #####:  642:      return 2;
        -:  643:    case outpost:
    #####:  644:      return 5;
        -:  645:    case salvager:
    #####:  646:      return 4;
        -:  647:    case sea_hag:
    #####:  648:      return 4;
        -:  649:    case treasure_map:
    #####:  650:      return 4;
        -:  651:    }
        -:  652:	
    #####:  653:  return -1;
        -:  654:}
        -:  655:
    10000:  656:int run_smithy(int currentPlayer, struct gameState *state, int handPos){
        -:  657:      //+3 Cards
        -:  658:      int i;
    40000:  659:      for (i = 0; i < 3; i++)
        -:  660:	{
    30000:  661:	  drawCard(currentPlayer, state);
        -:  662:	}
        -:  663:      //discard card from hand
    10000:  664:      discardCard(handPos, currentPlayer, state, 0);
    10000:  665:      return 0;
        -:  666:}	
        -:  667:
    80000:  668:int run_adventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int *temphand){
    80000:  669:	int z = 0;
   852284:  670:	while(drawntreasure<2){
   692284:  671:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
     1350:  672:			shuffle(currentPlayer, state);
        -:  673:		}
   692284:  674:		drawCard(currentPlayer, state);
   692284:  675:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   692284:  676:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
   160000:  677:			drawntreasure++;
        -:  678:		else{
   532284:  679:			temphand[z]=cardDrawn;
   532284:  680:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   532284:  681:			z++;
        -:  682:		}
        -:  683:	}
   692284:  684:	while(z-1>=0){
   532284:  685:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   532284:  686:		z=z-1;
        -:  687:	}
    80000:  688:	return 0;
        -:  689:}
        -:  690:
    #####:  691:int run_council_room(int currentPlayer,struct gameState *state, int handPos){
        -:  692:	int i;	
        -:  693:	//+4 Cards
    #####:  694:	for (i = 0; i < 4; i++)
        -:  695:	{
    #####:  696:		drawCard(currentPlayer, state);
        -:  697:	}
        -:  698:
        -:  699:	//+1 Buy
    #####:  700:	state->numBuys++;
        -:  701:
        -:  702:	//Each other player draws a card
    #####:  703:	for (i = 0; i < state->numPlayers; i++) //bug added
        -:  704:	{
    #####:  705:		if ( i != currentPlayer )
        -:  706:		{
    #####:  707:			drawCard(i, state);
        -:  708:		}
        -:  709:	}
        -:  710:
        -:  711:	//put played card in played card pile
    #####:  712:	discardCard(handPos, currentPlayer, state, 0);		
    #####:  713:	return 0;
        -:  714:}
        -:  715:
    #####:  716:int run_feast(struct gameState *state, int currentPlayer, int *temphand, int choice1){
        -:  717:	int i;
        -:  718:	int x;
        -:  719:	//gain card with cost up to 5
        -:  720:	//Backup hand
    #####:  721:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  722:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  723:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  724:	}
        -:  725:	//Backup hand
        -:  726:
        -:  727:	//Update Coins for Buy
    #####:  728:	updateCoins(currentPlayer, state, 5);
    #####:  729:	x = 1;//Condition to loop on
    #####:  730:	while( x == 1) {//Buy one card
    #####:  731:		if (supplyCount(choice1, state) <= 0){
        -:  732:			if (DEBUG)
        -:  733:				printf("None of that card left, sorry!\n");
        -:  734:
        -:  735:			if (DEBUG){
        -:  736:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  737:			}
        -:  738:		}
    #####:  739:		else if (state->coins < getCost(choice1)){
    #####:  740:			printf("That card is too expensive!\n");
        -:  741:
        -:  742:			if (DEBUG){
        -:  743:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  744:			}
        -:  745:		}
        -:  746:		else{
        -:  747:
        -:  748:			if (DEBUG){
        -:  749:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  750:			}
        -:  751:
    #####:  752:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  753:			x = 0;//No more buying cards
        -:  754:
        -:  755:			if (DEBUG){
        -:  756:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  757:			}
        -:  758:
        -:  759:		}
        -:  760:	}     
        -:  761:
        -:  762:	//Reset Hand
    #####:  763:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  764:		state->hand[currentPlayer][i] = temphand[i];
    #####:  765:		temphand[i] = -1;
        -:  766:	}
        -:  767:	//Reset Hand
    #####:  768:	return 0;
        -:  769:}
        -:  770:
     5000:  771:int run_mine(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos){
        -:  772:	int j;
        -:  773:	int i;
     5000:  774:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  775:
     5000:  776:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  777:	{
     3863:  778:		return -1;
        -:  779:	}
        -:  780:
     1137:  781:	if (choice2 > treasure_map || choice2 < curse)
        -:  782:	{
    #####:  783:		return -1;
        -:  784:	}
        -:  785:
     1137:  786:	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  787:	{
      734:  788:		return -1;
        -:  789:	}
        -:  790:
      403:  791:	gainCard(choice2, state, 2, currentPlayer);
        -:  792:
        -:  793:	//discard card from hand
      403:  794:	discardCard(handPos, currentPlayer, state, 0);
        -:  795:
        -:  796:	//discard trashed card
     4767:  797:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  798:	{
     4766:  799:		if (state->hand[currentPlayer][i] == j)
        -:  800:		{
      402:  801:			discardCard(i, currentPlayer, state, 0);			
      402:  802:			break;
        -:  803:		}
        -:  804:	}
        -:  805:
      403:  806:	return 0;
        -:  807:}
        -:  808:
    #####:  809:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  810:{
        -:  811:	int i;
        -:  812:	int j;
        -:  813:	int k;
        -:  814:	int x;
        -:  815:	int index;
    #####:  816:	int currentPlayer = whoseTurn(state);
    #####:  817:	int nextPlayer = currentPlayer + 1;
        -:  818:
    #####:  819:	int tributeRevealedCards[2] = {-1, -1};
        -:  820:	int temphand[MAX_HAND];// moved above the if statement
    #####:  821:	int drawntreasure=0;
        -:  822:	int cardDrawn;
    #####:  823:	int z = 0;// this is the counter for the temp hand
    #####:  824:	if (nextPlayer > (state->numPlayers - 1)){
    #####:  825:		nextPlayer = 0;
        -:  826:	}
        -:  827:
        -:  828:
        -:  829:	//uses switch to select card and perform actions
    #####:  830:	switch( card ) 
        -:  831:	{
        -:  832:		case adventurer:
    #####:  833:			run_adventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand);
    #####:  834:			return 0;
        -:  835:
        -:  836:		case council_room:
    #####:  837:			run_council_room(currentPlayer, state, handPos);
    #####:  838:			return 0;
        -:  839:
        -:  840:		case feast:
    #####:  841:			run_feast(state, currentPlayer, temphand, choice1);
        -:  842:
    #####:  843:			return 0;
        -:  844:
        -:  845:		case gardens:
    #####:  846:			return -1;
        -:  847:
        -:  848:		case mine:
    #####:  849:			run_mine(state, currentPlayer, choice1, choice2, handPos);		
    #####:  850:			return 0;
        -:  851:
        -:  852:		case remodel:
    #####:  853:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  856:			{
    #####:  857:				return -1;
        -:  858:			}
        -:  859:
    #####:  860:			gainCard(choice2, state, 0, currentPlayer);
        -:  861:
        -:  862:			//discard card from hand
    #####:  863:			discardCard(handPos, currentPlayer, state, 0);
        -:  864:
        -:  865:			//discard trashed card
    #####:  866:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  867:			{
    #####:  868:				if (state->hand[currentPlayer][i] == j)
        -:  869:				{
    #####:  870:					discardCard(i, currentPlayer, state, 0);			
    #####:  871:					break;
        -:  872:				}
        -:  873:			}
        -:  874:
        -:  875:
    #####:  876:			return 0;
        -:  877:
        -:  878:		case smithy:
    #####:  879:			run_smithy(currentPlayer, state, handPos);
    #####:  880:			return 0;     
        -:  881:
        -:  882:		case village:
        -:  883:			//+1 Card
    #####:  884:			drawCard(currentPlayer, state);
        -:  885:
        -:  886:			//+2 Actions
    #####:  887:			state->numActions = state->numActions + 2;
        -:  888:
        -:  889:			//discard played card from hand
    #####:  890:			discardCard(handPos, currentPlayer, state, 0);
    #####:  891:			return 0;
        -:  892:
        -:  893:		case baron:
    #####:  894:			state->numBuys++;//Increase buys by 1!
    #####:  895:			if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  896:				int p = 0;//Iterator for hand!
    #####:  897:				int card_not_discarded = 1;//Flag for discard set!
    #####:  898:				while(card_not_discarded){
    #####:  899:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  900:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  901:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  902:						state->discardCount[currentPlayer]++;
    #####:  903:						for (;p < state->handCount[currentPlayer]; p++){
    #####:  904:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  905:						}
    #####:  906:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  907:						state->handCount[currentPlayer]--;
    #####:  908:						card_not_discarded = 0;//Exit the loop
        -:  909:					}
    #####:  910:					else if (p > state->handCount[currentPlayer]){
        -:  911:						if(DEBUG) {
        -:  912:							printf("No estate cards in your hand, invalid choice\n");
        -:  913:							printf("Must gain an estate if there are any\n");
        -:  914:						}
    #####:  915:						if (supplyCount(estate, state) > 0){
    #####:  916:							gainCard(estate, state, 0, currentPlayer);
    #####:  917:							state->supplyCount[estate]--;//Decrement estates
    #####:  918:							if (supplyCount(estate, state) == 0){
    #####:  919:								isGameOver(state);
        -:  920:							}
        -:  921:						}
    #####:  922:						card_not_discarded = 0;//Exit the loop
        -:  923:					}
        -:  924:
        -:  925:					else{
    #####:  926:						p++;//Next card
        -:  927:					}
        -:  928:				}
        -:  929:			}
        -:  930:
        -:  931:			else{
    #####:  932:				if (supplyCount(estate, state) > 0){
    #####:  933:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  934:					state->supplyCount[estate]--;//Decrement Estates
    #####:  935:					if (supplyCount(estate, state) == 0){
    #####:  936:						isGameOver(state);
        -:  937:					}
        -:  938:				}
        -:  939:			}
        -:  940:
        -:  941:
    #####:  942:			return 0;
        -:  943:
        -:  944:		case great_hall:
        -:  945:			//+1 Card
    #####:  946:			drawCard(currentPlayer, state);
        -:  947:
        -:  948:			//+1 Actions
    #####:  949:			state->numActions++;
        -:  950:
        -:  951:			//discard card from hand
    #####:  952:			discardCard(handPos, currentPlayer, state, 0);
    #####:  953:			return 0;
        -:  954:
        -:  955:		case minion:
        -:  956:			//+1 action
    #####:  957:			state->numActions++;
        -:  958:
        -:  959:			//discard card from hand
    #####:  960:			discardCard(handPos, currentPlayer, state, 0);
        -:  961:
    #####:  962:			if (choice1)		//+2 coins
        -:  963:			{
    #####:  964:				state->coins = state->coins + 2;
        -:  965:			}
        -:  966:
    #####:  967:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  968:			{
        -:  969:				//discard hand
    #####:  970:				while(numHandCards(state) > 0)
        -:  971:				{
    #####:  972:					discardCard(handPos, currentPlayer, state, 0);
        -:  973:				}
        -:  974:
        -:  975:				//draw 4
    #####:  976:				for (i = 0; i < 4; i++)
        -:  977:				{
    #####:  978:					drawCard(currentPlayer, state);
        -:  979:				}
        -:  980:
        -:  981:				//other players discard hand and redraw if hand size > 4
    #####:  982:				for (i = 0; i < state->numPlayers; i++)
        -:  983:				{
    #####:  984:					if (i != currentPlayer)
        -:  985:					{
    #####:  986:						if ( state->handCount[i] > 4 )
        -:  987:						{
        -:  988:							//discard hand
    #####:  989:							while( state->handCount[i] > 0 )
        -:  990:							{
    #####:  991:								discardCard(handPos, i, state, 0);
        -:  992:							}
        -:  993:
        -:  994:							//draw 4
    #####:  995:							for (j = 0; j < 4; j++)
        -:  996:							{
    #####:  997:								drawCard(i, state);
        -:  998:							}
        -:  999:						}
        -: 1000:					}
        -: 1001:				}
        -: 1002:
        -: 1003:			}
    #####: 1004:			return 0;
        -: 1005:
        -: 1006:		case steward:
    #####: 1007:			if (choice1 == 1)
        -: 1008:			{
        -: 1009:				//+2 cards
    #####: 1010:				drawCard(currentPlayer, state);
    #####: 1011:				drawCard(currentPlayer, state);
        -: 1012:			}
    #####: 1013:			else if (choice1 == 2)
        -: 1014:			{
        -: 1015:				//+2 coins
    #####: 1016:				state->coins = state->coins + 2;
        -: 1017:			}
        -: 1018:			else
        -: 1019:			{
        -: 1020:				//trash 2 cards in hand
    #####: 1021:				discardCard(choice2, currentPlayer, state, 1);
    #####: 1022:				discardCard(choice3, currentPlayer, state, 1);
        -: 1023:			}
        -: 1024:
        -: 1025:			//discard card from hand
    #####: 1026:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1027:			return 0;
        -: 1028:
        -: 1029:		case tribute:
    #####: 1030:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1031:				if (state->deckCount[nextPlayer] > 0){
    #####: 1032:					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1033:					state->deckCount[nextPlayer]--;
        -: 1034:				}
    #####: 1035:				else if (state->discardCount[nextPlayer] > 0){
    #####: 1036:					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1037:					state->discardCount[nextPlayer]--;
        -: 1038:				}
        -: 1039:				else{
        -: 1040:					//No Card to Reveal
        -: 1041:					if (DEBUG){
        -: 1042:						printf("No cards to reveal\n");
        -: 1043:					}
        -: 1044:				}
        -: 1045:			}
        -: 1046:
        -: 1047:			else{
    #####: 1048:				if (state->deckCount[nextPlayer] == 0){
    #####: 1049:					for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1050:						state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1051:						state->deckCount[nextPlayer]++;
    #####: 1052:						state->discard[nextPlayer][i] = -1;
    #####: 1053:						state->discardCount[nextPlayer]--;
        -: 1054:					}
        -: 1055:
    #####: 1056:					shuffle(nextPlayer,state);//Shuffle the deck
        -: 1057:				} 
    #####: 1058:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1060:				state->deckCount[nextPlayer]--;
    #####: 1061:				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:				state->deckCount[nextPlayer]--;
        -: 1064:			}    
        -: 1065:
    #####: 1066:			if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1067:				state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1068:				state->playedCardCount++;
    #####: 1069:				tributeRevealedCards[1] = -1;
        -: 1070:			}
        -: 1071:
    #####: 1072:			for (i = 0; i <= 2; i ++){
    #####: 1073:				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1074:					state->coins += 2;
        -: 1075:				}
        -: 1076:
    #####: 1077:				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1078:					drawCard(currentPlayer, state);
    #####: 1079:					drawCard(currentPlayer, state);
        -: 1080:				}
        -: 1081:				else{//Action Card
    #####: 1082:					state->numActions = state->numActions + 2;
        -: 1083:				}
        -: 1084:			}
        -: 1085:
    #####: 1086:			return 0;
        -: 1087:
        -: 1088:		case ambassador:
    #####: 1089:			j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:			if (choice2 > 2 || choice2 < 0)
        -: 1092:			{
    #####: 1093:				return -1;				
        -: 1094:			}
        -: 1095:
    #####: 1096:			if (choice1 == handPos)
        -: 1097:			{
    #####: 1098:				return -1;
        -: 1099:			}
        -: 1100:
    #####: 1101:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:			{
    #####: 1103:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1104:				{
    #####: 1105:					j++;
        -: 1106:				}
        -: 1107:			}
    #####: 1108:			if (j < choice2)
        -: 1109:			{
    #####: 1110:				return -1;				
        -: 1111:			}
        -: 1112:
        -: 1113:			if (DEBUG) 
        -: 1114:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:			//increase supply count for choosen card by amount being discarded
    #####: 1117:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:
        -: 1119:			//each other player gains a copy of revealed card
    #####: 1120:			for (i = 0; i < state->numPlayers; i++)
        -: 1121:			{
    #####: 1122:				if (i != currentPlayer)
        -: 1123:				{
    #####: 1124:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1125:				}
        -: 1126:			}
        -: 1127:
        -: 1128:			//discard played card from hand
    #####: 1129:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1130:
        -: 1131:			//trash copies of cards returned to supply
    #####: 1132:			for (j = 0; j < choice2; j++)
        -: 1133:			{
    #####: 1134:				for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1135:				{
    #####: 1136:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1137:					{
    #####: 1138:						discardCard(i, currentPlayer, state, 1);
    #####: 1139:						break;
        -: 1140:					}
        -: 1141:				}
        -: 1142:			}			
        -: 1143:
    #####: 1144:			return 0;
        -: 1145:
        -: 1146:		case cutpurse:
        -: 1147:
    #####: 1148:			updateCoins(currentPlayer, state, 2);
    #####: 1149:			for (i = 0; i < state->numPlayers; i++)
        -: 1150:			{
    #####: 1151:				if (i != currentPlayer)
        -: 1152:				{
    #####: 1153:					for (j = 0; j < state->handCount[i]; j++)
        -: 1154:					{
    #####: 1155:						if (state->hand[i][j] == copper)
        -: 1156:						{
    #####: 1157:							discardCard(j, i, state, 0);
    #####: 1158:							break;
        -: 1159:						}
    #####: 1160:						if (j == state->handCount[i])
        -: 1161:						{
    #####: 1162:							for (k = 0; k < state->handCount[i]; k++)
        -: 1163:							{
        -: 1164:								if (DEBUG)
        -: 1165:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:							}	
    #####: 1167:							break;
        -: 1168:						}		
        -: 1169:					}
        -: 1170:
        -: 1171:				}
        -: 1172:
        -: 1173:			}				
        -: 1174:
        -: 1175:			//discard played card from hand
    #####: 1176:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1177:
    #####: 1178:			return 0;
        -: 1179:
        -: 1180:
        -: 1181:		case embargo: 
        -: 1182:			//+2 Coins
    #####: 1183:			state->coins = state->coins + 2;
        -: 1184:
        -: 1185:			//see if selected pile is in play
    #####: 1186:			if ( state->supplyCount[choice1] == -1 )
        -: 1187:			{
    #####: 1188:				return -1;
        -: 1189:			}
        -: 1190:
        -: 1191:			//add embargo token to selected supply pile
    #####: 1192:			state->embargoTokens[choice1]++;
        -: 1193:
        -: 1194:			//trash card
    #####: 1195:			discardCard(handPos, currentPlayer, state, 1);		
    #####: 1196:			return 0;
        -: 1197:
        -: 1198:		case outpost:
        -: 1199:			//set outpost flag
    #####: 1200:			state->outpostPlayed++;
        -: 1201:
        -: 1202:			//discard card
    #####: 1203:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:			return 0;
        -: 1205:
        -: 1206:		case salvager:
        -: 1207:			//+1 buy
    #####: 1208:			state->numBuys++;
        -: 1209:
    #####: 1210:			if (choice1)
        -: 1211:			{
        -: 1212:				//gain coins equal to trashed card
    #####: 1213:				state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1214:				//trash card
    #####: 1215:				discardCard(choice1, currentPlayer, state, 1);	
        -: 1216:			}
        -: 1217:
        -: 1218:			//discard card
    #####: 1219:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1220:			return 0;
        -: 1221:
        -: 1222:		case sea_hag:
    #####: 1223:			for (i = 0; i < state->numPlayers; i++){
    #####: 1224:				if (i != currentPlayer){
    #####: 1225:					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1226:					state->discardCount[i]++;
    #####: 1227:					state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1228:				}
        -: 1229:			}
    #####: 1230:			return 0;
        -: 1231:
        -: 1232:		case treasure_map:
        -: 1233:			//search hand for another treasure_map
    #####: 1234:			index = -1;
    #####: 1235:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1236:			{
    #####: 1237:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1238:				{
    #####: 1239:					index = i;
    #####: 1240:					break;
        -: 1241:				}
        -: 1242:			}
    #####: 1243:			if (index > -1)
        -: 1244:			{
        -: 1245:				//trash both treasure cards
    #####: 1246:				discardCard(handPos, currentPlayer, state, 1);
    #####: 1247:				discardCard(index, currentPlayer, state, 1);
        -: 1248:
        -: 1249:				//gain 4 Gold cards
    #####: 1250:				for (i = 0; i < 4; i++)
        -: 1251:				{
    #####: 1252:					gainCard(gold, state, 1, currentPlayer);
        -: 1253:				}
        -: 1254:
        -: 1255:				//return success
    #####: 1256:				return 1;
        -: 1257:			}
        -: 1258:
        -: 1259:			//no second treasure_map found in hand
    #####: 1260:			return -1;
        -: 1261:	}
        -: 1262:
    #####: 1263:	return -1;
        -: 1264:}
        -: 1265:
    10805: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1267:{
        -: 1268:
        -: 1269:	//if card is not trashed, added to Played pile 
    10805: 1270:	if (trashFlag < 1)
        -: 1271:	{
        -: 1272:		//add card to played pile
    10805: 1273:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    10805: 1274:		state->playedCardCount++;
        -: 1275:	}
        -: 1276:	//set played card to -1
    10805: 1277:	state->hand[currentPlayer][handPos] = -1;
        -: 1278:
        -: 1279:	//remove card from player's hand
    10805: 1280:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1281:	{
        -: 1282:		//reduce number of cards in hand
        3: 1283:		state->handCount[currentPlayer]--;
        -: 1284:	}
    10802: 1285:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1286:	{
        -: 1287:		//reduce number of cards in hand
    #####: 1288:		state->handCount[currentPlayer]--;
        -: 1289:	}
        -: 1290:	else 	
        -: 1291:	{
        -: 1292:		//replace discarded card with last card in hand
    10802: 1293:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:		//set last card to -1
    10802: 1295:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:		//reduce number of cards in hand
    10802: 1297:		state->handCount[currentPlayer]--;
        -: 1298:	}
        -: 1299:
    10805: 1300:	return 0;
        -: 1301:}
        -: 1302:
      403: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:	//Note: supplyPos is enum of choosen card
        -: 1306:
        -: 1307:	//check if supply pile is empty (0) or card is not used in game (-1)
      403: 1308:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1309:	{
      199: 1310:		return -1;
        -: 1311:	}
        -: 1312:
        -: 1313:	//added card for [whoseTurn] current player:
        -: 1314:	// toFlag = 0 : add to discard
        -: 1315:	// toFlag = 1 : add to deck
        -: 1316:	// toFlag = 2 : add to hand
        -: 1317:
      204: 1318:	if (toFlag == 1)
        -: 1319:	{
    #####: 1320:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:		state->deckCount[player]++;
        -: 1322:	}
      204: 1323:	else if (toFlag == 2)
        -: 1324:	{
      204: 1325:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
      204: 1326:		state->handCount[player]++;
        -: 1327:	}
        -: 1328:	else
        -: 1329:	{
    #####: 1330:		state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1331:		state->discardCount[player]++;
        -: 1332:	}
        -: 1333:
        -: 1334:	//decrease number in supply pile
      204: 1335:	state->supplyCount[supplyPos]--;
        -: 1336:
      204: 1337:	return 0;
        -: 1338:}
        -: 1339:
    #####: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:	int i;
        -: 1343:
        -: 1344:	//reset coin count
    #####: 1345:	state->coins = 0;
        -: 1346:
        -: 1347:	//add coins for each Treasure card in player's hand
    #####: 1348:	for (i = 0; i < state->handCount[player]; i++)
        -: 1349:	{
    #####: 1350:		if (state->hand[player][i] == copper)
        -: 1351:		{
    #####: 1352:			state->coins += 1;
        -: 1353:		}
    #####: 1354:		else if (state->hand[player][i] == silver)
        -: 1355:		{
    #####: 1356:			state->coins += 2;
        -: 1357:		}
    #####: 1358:		else if (state->hand[player][i] == gold)
        -: 1359:		{
    #####: 1360:			state->coins += 3;
        -: 1361:		}	
        -: 1362:	}	
        -: 1363:
        -: 1364:	//add bonus
    #####: 1365:	state->coins += bonus;
        -: 1366:
    #####: 1367:	return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
