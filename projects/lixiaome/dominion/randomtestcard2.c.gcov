        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include"dominion.h"
        -:    2:#include"dominion_helpers.h"
        -:    3:#include"rngs.h"
        -:    4:#include<string.h>
        -:    5:#include<stdio.h>
        -:    6:#include<math.h>
        -:    7:
     5000:    8:int checkMine(struct gameState *post,int p,int choice1 ,int choice2 ,int handPos){
     5000:    9:	int check = 0;
        -:   10:	int i, n,r;
        -:   11:	struct gameState pre;
     5000:   12:	memcpy (&pre, post, sizeof(struct gameState));
        -:   13:
        -:   14:	//printf("Testing smithy with Handcount = %d, deckCount = %d, discardCount = %d\n", pre.handCount[p],pre.deckCount[p],pre.discardCount[p]);
        -:   15:	//printf("choice1 = %d, choice2 = %d, handPos = %d\n",handPos,choice1,choice2);
     5000:   16:	r = run_mine(post,p,choice1,choice2,handPos);
        -:   17:
     8944:   18:	if(pre.hand[p][choice1] < copper || pre.hand[p][choice1] > gold){
     3944:   19:		if(!assert(r==-1)); //check = 1;
        -:   20:	}
     1056:   21:	else if(choice2 > treasure_map || choice2 < curse){
    #####:   22:		if(!assert(r==-1)); //check = 1;
        -:   23:	}
     1056:   24:	else if((getCost(pre.hand[p][choice1]) + 3) > getCost(choice2)){
      675:   25:		if(!assert(r==-1)); //check = 1;
        -:   26:	}
      381:   27:	else if(supplyCount(choice2,post) > 0){
      189:   28:		if(!assert (post->handCount[p] == pre.handCount[p] - 1)){
        -:   29://			check = 1;
        -:   30://			printf("post handcount = %d, pre handcount = %d\n", post->handCount[p], pre.handCount[p]);
        -:   31:		}
        -:   32:	}
        -:   33:	else{
      192:   34:		if(!assert (post->handCount[p] == pre.handCount[p] - 2)){
        -:   35://			check = 1;
        -:   36://			printf("post handcount = %d, pre handcount = %d\n", post->handCount[p], pre.handCount[p]);
        -:   37:		}
        -:   38:	}
        -:   39://	if(check == 1){
        -:   40://		printf("Testing mine with Handcount = %d, deckCount = %d, discardCount = %d\n", pre.handCount[p],pre.deckCount[p],pre.discardCount[p]);
        -:   41://		printf("choice1 = %d, choice2 = %d, handPos = %d\n",choice1,choice2,handPos);
        -:   42://	}
     5000:   43:}
        -:   44:
        1:   45:int main(){
        1:   46:	int num_test = 5000;
        -:   47:	int handPos,choice1,choice2;
        -:   48:	int i,n,j,r,p, deckCount, discardCount, handCount;
        -:   49:
        1:   50:	int k[14] = {duchy,copper,silver,gold,adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   51:
        -:   52:	struct gameState G;
        -:   53:
        1:   54:	printf("Testing run_mine.\n");
        -:   55:
        1:   56:	printf ("RANDOM TESTS.\n");
        -:   57:
        1:   58:	SelectStream(2);
        1:   59:	PutSeed(3);
        -:   60:
     5001:   61:	for(i = 0; i < num_test;i++){
131505000:   62:		for(j = 0; j < sizeof(struct gameState); j++){
131500000:   63:			((char*)&G)[j] = floor(Random() * 256);
        -:   64:		}
     5000:   65:		p = floor(Random() * 2);
     5000:   66:		G.deckCount[p] = floor(Random() * MAX_DECK);
     5000:   67:		G.discardCount[p] = floor(Random() * MAX_DECK);
     5000:   68:		G.handCount[p] = floor(Random() * MAX_HAND);
     5000:   69:		G.playedCardCount = floor(Random() * MAX_HAND);
     5000:   70:		handPos = floor(Random() * G.handCount[p]);
     5000:   71:		choice2 = k[(int)floor(Random() * 14)];
        -:   72:
     5000:   73:		for(n = 0; n < G.deckCount[p];n++) G.deck[p][n] = k[(int)floor(Random() * 14)];
     5000:   74:		for(n = 0; n < G.discardCount[p];n++) G.discard[p][n] = k[(int)floor(Random() * 14)];
     5000:   75:		for(n = 0; n < G.handCount[p];n++) G.hand[p][n] = k[(int)floor(Random() * 14)];
     5000:   76:		for(n = 0; n < G.playedCardCount;n++) G.playedCards[n] = k[(int)floor(Random() * 14)];
        -:   77:
     5000:   78:		choice1 = floor(Random() * G.handCount[p]);
        -:   79:
     5000:   80:		checkMine(&G,p,choice1,choice2,handPos);
        -:   81:	}
        -:   82:
        1:   83:	printf("ALL TESTS OK.\n");
        -:   84:
        1:   85:	return 0;
        -:   86:}
